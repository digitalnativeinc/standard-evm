/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ILiquidityProtectionServiceInterface extends ethers.utils.Interface {
  functions: {
    "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)": FunctionFragment;
    "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)": FunctionFragment;
    "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)": FunctionFragment;
    "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)": FunctionFragment;
    "getLiquidityPool(address,address)": FunctionFragment;
    "isBlocked(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FirstBlockTrap_preValidateTransfer",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "LiquidityActivityTrap_preValidateTransfer",
    values: [string, string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "LiquidityAmountTrap_preValidateTransfer",
    values: [string, string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "LiquidityPercentTrap_preValidateTransfer",
    values: [string, string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocked",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FirstBlockTrap_preValidateTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LiquidityActivityTrap_preValidateTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LiquidityAmountTrap_preValidateTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LiquidityPercentTrap_preValidateTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBlocked", data: BytesLike): Result;

  events: {
    "Blocked(address,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Blocked"): EventFragment;
}

export type BlockedEvent = TypedEvent<
  [string, string, string] & { pool: string; trader: string; trap: string }
>;

export class ILiquidityProtectionService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILiquidityProtectionServiceInterface;

  functions: {
    FirstBlockTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    LiquidityActivityTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    LiquidityAmountTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    LiquidityPercentTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLiquidityPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isBlocked(
      counterToken: string,
      who: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  FirstBlockTrap_preValidateTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    counterToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  LiquidityActivityTrap_preValidateTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    counterToken: string,
    trapBlocks: BigNumberish,
    trapCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  LiquidityAmountTrap_preValidateTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    counterToken: string,
    trapBlocks: BigNumberish,
    trapAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  LiquidityPercentTrap_preValidateTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    counterToken: string,
    trapBlocks: BigNumberish,
    trapPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLiquidityPool(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isBlocked(
    counterToken: string,
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    FirstBlockTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    LiquidityActivityTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    LiquidityAmountTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    LiquidityPercentTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLiquidityPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isBlocked(
      counterToken: string,
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Blocked(address,address,string)"(
      pool?: null,
      trader?: null,
      trap?: null
    ): TypedEventFilter<
      [string, string, string],
      { pool: string; trader: string; trap: string }
    >;

    Blocked(
      pool?: null,
      trader?: null,
      trap?: null
    ): TypedEventFilter<
      [string, string, string],
      { pool: string; trader: string; trap: string }
    >;
  };

  estimateGas: {
    FirstBlockTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    LiquidityActivityTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    LiquidityAmountTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    LiquidityPercentTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLiquidityPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBlocked(
      counterToken: string,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FirstBlockTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    LiquidityActivityTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    LiquidityAmountTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    LiquidityPercentTrap_preValidateTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      counterToken: string,
      trapBlocks: BigNumberish,
      trapPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLiquidityPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBlocked(
      counterToken: string,
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
