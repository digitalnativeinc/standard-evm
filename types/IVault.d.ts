/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IVaultInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Borrow(uint256,uint256)": EventFragment;
    "CloseVault(address,uint256,uint256)": EventFragment;
    "DepositCollateral(uint256,uint256)": EventFragment;
    "Liquidated(address,address,uint256)": EventFragment;
    "PayBack(uint256,uint256,uint256)": EventFragment;
    "WithdrawCollateral(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCollateral"): EventFragment;
}

export type BorrowEvent = TypedEvent<
  [BigNumber, BigNumber] & { vaultID: BigNumber; amount: BigNumber }
>;

export type CloseVaultEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    vault: string;
    amount: BigNumber;
    closingFee: BigNumber;
  }
>;

export type DepositCollateralEvent = TypedEvent<
  [BigNumber, BigNumber] & { vaultID: BigNumber; amount: BigNumber }
>;

export type LiquidatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    vault: string;
    collateral: string;
    amount: BigNumber;
  }
>;

export type PayBackEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    vaultID: BigNumber;
    amount: BigNumber;
    paybackFee: BigNumber;
  }
>;

export type WithdrawCollateralEvent = TypedEvent<
  [BigNumber, BigNumber] & { vaultID: BigNumber; amount: BigNumber }
>;

export class IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVaultInterface;

  functions: {};

  callStatic: {};

  filters: {
    "Borrow(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    Borrow(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    "CloseVault(address,uint256,uint256)"(
      vault?: null,
      amount?: null,
      closingFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { vault: string; amount: BigNumber; closingFee: BigNumber }
    >;

    CloseVault(
      vault?: null,
      amount?: null,
      closingFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { vault: string; amount: BigNumber; closingFee: BigNumber }
    >;

    "DepositCollateral(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    DepositCollateral(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    "Liquidated(address,address,uint256)"(
      vault?: null,
      collateral?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; collateral: string; amount: BigNumber }
    >;

    Liquidated(
      vault?: null,
      collateral?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; collateral: string; amount: BigNumber }
    >;

    "PayBack(uint256,uint256,uint256)"(
      vaultID?: null,
      amount?: null,
      paybackFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber; paybackFee: BigNumber }
    >;

    PayBack(
      vaultID?: null,
      amount?: null,
      paybackFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber; paybackFee: BigNumber }
    >;

    "WithdrawCollateral(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    WithdrawCollateral(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
