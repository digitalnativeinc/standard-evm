/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VaultManagerInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ORACLE_OPERATOR_ROLE()": FunctionFragment;
    "PriceFeeds(address)": FunctionFragment;
    "WETH()": FunctionFragment;
    "addOracle(address,address)": FunctionFragment;
    "allVaults(uint256)": FunctionFragment;
    "allVaultsLength()": FunctionFragment;
    "createCDPNative(uint256)": FunctionFragment;
    "createVault(address,uint256,uint256)": FunctionFragment;
    "desiredSupply()": FunctionFragment;
    "feePool()": FunctionFragment;
    "getCDPConfig(address)": FunctionFragment;
    "getCDecimal(address)": FunctionFragment;
    "getLFR(address)": FunctionFragment;
    "getMCR(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSFR(address)": FunctionFragment;
    "getVault(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "initializeCDP(address,uint256,uint256,uint256)": FunctionFragment;
    "meter()": FunctionFragment;
    "rebase()": FunctionFragment;
    "rebaseActive()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFeeStrategy(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "v1()": FunctionFragment;
    "v2Factory()": FunctionFragment;
    "vaultCodeHash()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PriceFeeds", values: [string]): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOracle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allVaultsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCDPNative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "desiredSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCDPConfig",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getCDecimal", values: [string]): string;
  encodeFunctionData(functionFragment: "getLFR", values: [string]): string;
  encodeFunctionData(functionFragment: "getMCR", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getSFR", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCDP",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "meter", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebaseActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "v1", values?: undefined): string;
  encodeFunctionData(functionFragment: "v2Factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultCodeHash",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PriceFeeds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allVaultsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCDPNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "desiredSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCDPConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCDecimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLFR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSFR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeCDP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "meter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebaseActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "v1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "v2Factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultCodeHash",
    data: BytesLike
  ): Result;

  events: {
    "AggregatorAdded(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "VaultCreated(address,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
}

export type AggregatorAddedEvent = TypedEvent<
  [string, string] & { asset: string; aggregator: string }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type VaultCreatedEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    collateral: string;
    vaultId: BigNumber;
    creator: string;
    vault: string;
  }
>;

export class VaultManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultManagerInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ORACLE_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PriceFeeds(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addOracle(
      asset_: string,
      aggregator_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allVaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    allVaultsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createCDPNative(
      dAmount_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createVault(
      collateral_: string,
      cAmount_: BigNumberish,
      dAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    desiredSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePool(overrides?: CallOverrides): Promise<[string]>;

    getCDPConfig(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        MCR: BigNumber;
        LFR: BigNumber;
        SFR: BigNumber;
        cDecimals: BigNumber;
      }
    >;

    getCDecimal(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLFR(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMCR(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSFR(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVault(
      vaultId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      v1_: string,
      meter_: string,
      v2Factory_: string,
      feePool_: string,
      weth_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeCDP(
      collateral_: string,
      MCR_: BigNumberish,
      LFR_: BigNumberish,
      SFR_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    meter(overrides?: CallOverrides): Promise<[string]>;

    rebase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebaseActive(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeStrategy(
      feePool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    v1(overrides?: CallOverrides): Promise<[string]>;

    v2Factory(overrides?: CallOverrides): Promise<[string]>;

    vaultCodeHash(
      overrides?: CallOverrides
    ): Promise<[string] & { vaultCode: string }>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ORACLE_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  PriceFeeds(arg0: string, overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addOracle(
    asset_: string,
    aggregator_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allVaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allVaultsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createCDPNative(
    dAmount_: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createVault(
    collateral_: string,
    cAmount_: BigNumberish,
    dAmount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  desiredSupply(overrides?: CallOverrides): Promise<BigNumber>;

  feePool(overrides?: CallOverrides): Promise<string>;

  getCDPConfig(
    collateral_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      MCR: BigNumber;
      LFR: BigNumber;
      SFR: BigNumber;
      cDecimals: BigNumber;
    }
  >;

  getCDecimal(
    collateral_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLFR(collateral_: string, overrides?: CallOverrides): Promise<BigNumber>;

  getMCR(collateral_: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSFR(collateral_: string, overrides?: CallOverrides): Promise<BigNumber>;

  getVault(vaultId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    v1_: string,
    meter_: string,
    v2Factory_: string,
    feePool_: string,
    weth_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeCDP(
    collateral_: string,
    MCR_: BigNumberish,
    LFR_: BigNumberish,
    SFR_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  meter(overrides?: CallOverrides): Promise<string>;

  rebase(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebaseActive(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeStrategy(
    feePool_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  v1(overrides?: CallOverrides): Promise<string>;

  v2Factory(overrides?: CallOverrides): Promise<string>;

  vaultCodeHash(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ORACLE_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    PriceFeeds(arg0: string, overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addOracle(
      asset_: string,
      aggregator_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allVaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    allVaultsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createCDPNative(
      dAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createVault(
      collateral_: string,
      cAmount_: BigNumberish,
      dAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    desiredSupply(overrides?: CallOverrides): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<string>;

    getCDPConfig(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        MCR: BigNumber;
        LFR: BigNumber;
        SFR: BigNumber;
        cDecimals: BigNumber;
      }
    >;

    getCDecimal(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLFR(collateral_: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMCR(collateral_: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSFR(collateral_: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVault(
      vaultId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      v1_: string,
      meter_: string,
      v2Factory_: string,
      feePool_: string,
      weth_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeCDP(
      collateral_: string,
      MCR_: BigNumberish,
      LFR_: BigNumberish,
      SFR_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    meter(overrides?: CallOverrides): Promise<string>;

    rebase(overrides?: CallOverrides): Promise<void>;

    rebaseActive(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeStrategy(feePool_: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    v1(overrides?: CallOverrides): Promise<string>;

    v2Factory(overrides?: CallOverrides): Promise<string>;

    vaultCodeHash(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AggregatorAdded(address,address)"(
      asset?: null,
      aggregator?: null
    ): TypedEventFilter<
      [string, string],
      { asset: string; aggregator: string }
    >;

    AggregatorAdded(
      asset?: null,
      aggregator?: null
    ): TypedEventFilter<
      [string, string],
      { asset: string; aggregator: string }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "VaultCreated(address,uint256,address,address)"(
      collateral?: null,
      vaultId?: null,
      creator?: null,
      vault?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { collateral: string; vaultId: BigNumber; creator: string; vault: string }
    >;

    VaultCreated(
      collateral?: null,
      vaultId?: null,
      creator?: null,
      vault?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { collateral: string; vaultId: BigNumber; creator: string; vault: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PriceFeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addOracle(
      asset_: string,
      aggregator_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allVaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allVaultsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createCDPNative(
      dAmount_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createVault(
      collateral_: string,
      cAmount_: BigNumberish,
      dAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    desiredSupply(overrides?: CallOverrides): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<BigNumber>;

    getCDPConfig(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCDecimal(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLFR(collateral_: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMCR(collateral_: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSFR(collateral_: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVault(
      vaultId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      v1_: string,
      meter_: string,
      v2Factory_: string,
      feePool_: string,
      weth_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeCDP(
      collateral_: string,
      MCR_: BigNumberish,
      LFR_: BigNumberish,
      SFR_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    meter(overrides?: CallOverrides): Promise<BigNumber>;

    rebase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebaseActive(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeStrategy(
      feePool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    v1(overrides?: CallOverrides): Promise<BigNumber>;

    v2Factory(overrides?: CallOverrides): Promise<BigNumber>;

    vaultCodeHash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ORACLE_OPERATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PriceFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOracle(
      asset_: string,
      aggregator_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allVaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allVaultsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCDPNative(
      dAmount_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createVault(
      collateral_: string,
      cAmount_: BigNumberish,
      dAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    desiredSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCDPConfig(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCDecimal(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLFR(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMCR(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSFR(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(
      vaultId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      v1_: string,
      meter_: string,
      v2Factory_: string,
      feePool_: string,
      weth_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeCDP(
      collateral_: string,
      MCR_: BigNumberish,
      LFR_: BigNumberish,
      SFR_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    meter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebaseActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeStrategy(
      feePool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    v1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v2Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
