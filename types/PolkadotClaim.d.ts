/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PolkadotClaimInterface extends ethers.utils.Interface {
  functions: {
    "claim_allo(bytes32)": FunctionFragment;
    "claims(address)": FunctionFragment;
    "claims_idx(uint256)": FunctionFragment;
    "stnd()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim_allo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claims", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claims_idx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stnd", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim_allo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claims_idx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stnd", data: BytesLike): Result;

  events: {
    "Claimed(address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [string, string, BigNumber] & { eth: string; stnd: string; idx: BigNumber }
>;

export class PolkadotClaim extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PolkadotClaimInterface;

  functions: {
    claim_allo(
      dot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean] & {
        index: BigNumber;
        Address: string;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    claims_idx(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean] & {
        index: BigNumber;
        Address: string;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    stnd(overrides?: CallOverrides): Promise<[string]>;
  };

  claim_allo(
    dot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claims(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, boolean] & {
      index: BigNumber;
      Address: string;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  claims_idx(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, boolean] & {
      index: BigNumber;
      Address: string;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  stnd(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claim_allo(dot: BytesLike, overrides?: CallOverrides): Promise<void>;

    claims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean] & {
        index: BigNumber;
        Address: string;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    claims_idx(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean] & {
        index: BigNumber;
        Address: string;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    stnd(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Claimed(address,bytes32,uint256)"(
      eth?: string | null,
      stnd?: BytesLike | null,
      idx?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { eth: string; stnd: string; idx: BigNumber }
    >;

    Claimed(
      eth?: string | null,
      stnd?: BytesLike | null,
      idx?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { eth: string; stnd: string; idx: BigNumber }
    >;
  };

  estimateGas: {
    claim_allo(
      dot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claims_idx(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stnd(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim_allo(
      dot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claims_idx(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
