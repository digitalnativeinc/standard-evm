/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VaultRouter, VaultRouterInterface } from "../VaultRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "manager_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161015a38038061015a83398101604081905261002f916100c4565b600180546001600160a01b0319166001600160a01b03831690811790915560408051637ff79e0f60e01b81529051637ff79e0f91600480820192602092909190829003018186803b15801561008357600080fd5b505afa158015610097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bb91906100f4565b6000555061010d565b6000602082840312156100d657600080fd5b81516001600160a01b03811681146100ed57600080fd5b9392505050565b60006020828403121561010657600080fd5b5051919050565b603f8061011b6000396000f3fe6080604052600080fdfea2646970667358221220519a7fd34523f530b5f52d1faeb846d0a4bb551d4221a6349bd681b967b90fdf64736f6c63430008070033";

export class VaultRouter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VaultRouter> {
    return super.deploy(manager_, overrides || {}) as Promise<VaultRouter>;
  }
  getDeployTransaction(
    manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(manager_, overrides || {});
  }
  attach(address: string): VaultRouter {
    return super.attach(address) as VaultRouter;
  }
  connect(signer: Signer): VaultRouter__factory {
    return super.connect(signer) as VaultRouter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultRouterInterface {
    return new utils.Interface(_abi) as VaultRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultRouter {
    return new Contract(address, _abi, signerOrProvider) as VaultRouter;
  }
}
