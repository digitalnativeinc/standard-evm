/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { Permit, PermitInterface } from "../Permit";

const _abi = [
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xab97e08a",
        type: "bytes32",
      },
    ],
    name: "c_0xab97e08a",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xbee145fe",
        type: "bytes32",
      },
    ],
    name: "c_0xbee145fe",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xf9fb325f",
        type: "bytes32",
      },
    ],
    name: "c_0xf9fb325f",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xfa242dff",
        type: "bytes32",
      },
    ],
    name: "c_0xfa242dff",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class Permit__factory {
  static readonly abi = _abi;
  static createInterface(): PermitInterface {
    return new utils.Interface(_abi) as PermitInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Permit {
    return new Contract(address, _abi, signerOrProvider) as Permit;
  }
}
