/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockToken, MockTokenInterface } from "../MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x15383198",
        type: "bytes32",
      },
    ],
    name: "c_0x15383198",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b9938038062001b998339818101604052810190620000379190620003e2565b8181816003908051906020019062000051929190620002b4565b5080600490805190602001906200006a929190620002b4565b505050620000a17fd6d1e3398e2d41ddf676a213abd60ceac3a384ea981689b158c6a6a7b888bd9660001b6200012e60201b60201c565b620000d57f5a87b38a245198702dcbf703a0503bed97d24cf317c223b803a9b3eb7e39f57960001b6200012e60201b60201c565b620001097f4574f4a9738ef2f1b346b142e1e52f0302013afd3fefceb616d3415bb6529bd860001b6200012e60201b60201c565b62000126336a084595161401484a0000006200013160201b60201c565b505062000732565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019b906200049f565b60405180910390fd5b620001b860008383620002aa60201b60201c565b8060026000828254620001cc91906200054e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200022391906200054e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200028a9190620004c1565b60405180910390a3620002a660008383620002af60201b60201c565b5050565b505050565b505050565b828054620002c290620005eb565b90600052602060002090601f016020900481019282620002e6576000855562000332565b82601f106200030157805160ff191683800117855562000332565b8280016001018555821562000332579182015b828111156200033157825182559160200191906001019062000314565b5b50905062000341919062000345565b5090565b5b808211156200036057600081600090555060010162000346565b5090565b60006200037b620003758462000507565b620004de565b9050828152602081018484840111156200039a5762000399620006e9565b5b620003a7848285620005b5565b509392505050565b600082601f830112620003c757620003c6620006e4565b5b8151620003d984826020860162000364565b91505092915050565b60008060408385031215620003fc57620003fb620006f3565b5b600083015167ffffffffffffffff8111156200041d576200041c620006ee565b5b6200042b85828601620003af565b925050602083015167ffffffffffffffff8111156200044f576200044e620006ee565b5b6200045d85828601620003af565b9150509250929050565b600062000476601f836200053d565b9150620004838262000709565b602082019050919050565b6200049981620005ab565b82525050565b60006020820190508181036000830152620004ba8162000467565b9050919050565b6000602082019050620004d860008301846200048e565b92915050565b6000620004ea620004fd565b9050620004f8828262000621565b919050565b6000604051905090565b600067ffffffffffffffff821115620005255762000524620006b5565b5b6200053082620006f8565b9050602081019050919050565b600082825260208201905092915050565b60006200055b82620005ab565b91506200056883620005ab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620005a0576200059f62000657565b5b828201905092915050565b6000819050919050565b60005b83811015620005d5578082015181840152602081019050620005b8565b83811115620005e5576000848401525b50505050565b600060028204905060018216806200060457607f821691505b602082108114156200061b576200061a62000686565b5b50919050565b6200062c82620006f8565b810181811067ffffffffffffffff821117156200064e576200064d620006b5565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61145780620007426000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d71461022d578063a9059cbb1461025d578063dd62ed3e1461028d576100d4565b806339509351146101af57806370a08231146101df57806395d89b411461020f576100d4565b806318160ddd116100b257806318160ddd1461014357806323b872dd14610161578063313ce56714610191576100d4565b80630427d621146100d957806306fdde03146100f5578063095ea7b314610113575b600080fd5b6100f360048036038101906100ee9190610d2e565b6102bd565b005b6100fd6102c0565b60405161010a9190610ed1565b60405180910390f35b61012d60048036038101906101289190610cee565b610352565b60405161013a9190610eb6565b60405180910390f35b61014b610370565b6040516101589190610fd3565b60405180910390f35b61017b60048036038101906101769190610c9b565b61037a565b6040516101889190610eb6565b60405180910390f35b610199610472565b6040516101a69190610fee565b60405180910390f35b6101c960048036038101906101c49190610cee565b61047b565b6040516101d69190610eb6565b60405180910390f35b6101f960048036038101906101f49190610c2e565b610527565b6040516102069190610fd3565b60405180910390f35b61021761056f565b6040516102249190610ed1565b60405180910390f35b61024760048036038101906102429190610cee565b610601565b6040516102549190610eb6565b60405180910390f35b61027760048036038101906102729190610cee565b6106ec565b6040516102849190610eb6565b60405180910390f35b6102a760048036038101906102a29190610c5b565b61070a565b6040516102b49190610fd3565b60405180910390f35b50565b6060600380546102cf9061110d565b80601f01602080910402602001604051908101604052809291908181526020018280546102fb9061110d565b80156103485780601f1061031d57610100808354040283529160200191610348565b820191906000526020600020905b81548152906001019060200180831161032b57829003601f168201915b5050505050905090565b600061036661035f610791565b8484610799565b6001905092915050565b6000600254905090565b6000610387848484610964565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103d2610791565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044990610f53565b60405180910390fd5b6104668561045e610791565b858403610799565b60019150509392505050565b60006012905090565b600061051d610488610791565b848460016000610496610791565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105189190611025565b610799565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461057e9061110d565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa9061110d565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050505050905090565b60008060016000610610610791565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c490610fb3565b60405180910390fd5b6106e16106d8610791565b85858403610799565b600191505092915050565b60006107006106f9610791565b8484610964565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090610f93565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087090610f13565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109579190610fd3565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cb90610f73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3b90610ef3565b60405180910390fd5b610a4f838383610be5565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acc90610f33565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b689190611025565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bcc9190610fd3565b60405180910390a3610bdf848484610bea565b50505050565b505050565b505050565b600081359050610bfe816113dc565b92915050565b600081359050610c13816113f3565b92915050565b600081359050610c288161140a565b92915050565b600060208284031215610c4457610c4361119d565b5b6000610c5284828501610bef565b91505092915050565b60008060408385031215610c7257610c7161119d565b5b6000610c8085828601610bef565b9250506020610c9185828601610bef565b9150509250929050565b600080600060608486031215610cb457610cb361119d565b5b6000610cc286828701610bef565b9350506020610cd386828701610bef565b9250506040610ce486828701610c19565b9150509250925092565b60008060408385031215610d0557610d0461119d565b5b6000610d1385828601610bef565b9250506020610d2485828601610c19565b9150509250929050565b600060208284031215610d4457610d4361119d565b5b6000610d5284828501610c04565b91505092915050565b610d648161108d565b82525050565b6000610d7582611009565b610d7f8185611014565b9350610d8f8185602086016110da565b610d98816111a2565b840191505092915050565b6000610db0602383611014565b9150610dbb826111b3565b604082019050919050565b6000610dd3602283611014565b9150610dde82611202565b604082019050919050565b6000610df6602683611014565b9150610e0182611251565b604082019050919050565b6000610e19602883611014565b9150610e24826112a0565b604082019050919050565b6000610e3c602583611014565b9150610e47826112ef565b604082019050919050565b6000610e5f602483611014565b9150610e6a8261133e565b604082019050919050565b6000610e82602583611014565b9150610e8d8261138d565b604082019050919050565b610ea1816110c3565b82525050565b610eb0816110cd565b82525050565b6000602082019050610ecb6000830184610d5b565b92915050565b60006020820190508181036000830152610eeb8184610d6a565b905092915050565b60006020820190508181036000830152610f0c81610da3565b9050919050565b60006020820190508181036000830152610f2c81610dc6565b9050919050565b60006020820190508181036000830152610f4c81610de9565b9050919050565b60006020820190508181036000830152610f6c81610e0c565b9050919050565b60006020820190508181036000830152610f8c81610e2f565b9050919050565b60006020820190508181036000830152610fac81610e52565b9050919050565b60006020820190508181036000830152610fcc81610e75565b9050919050565b6000602082019050610fe86000830184610e98565b92915050565b60006020820190506110036000830184610ea7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611030826110c3565b915061103b836110c3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110705761106f61113f565b5b828201905092915050565b6000611086826110a3565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156110f85780820151818401526020810190506110dd565b83811115611107576000848401525b50505050565b6000600282049050600182168061112557607f821691505b602082108114156111395761113861116e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6113e58161107b565b81146113f057600080fd5b50565b6113fc81611099565b811461140757600080fd5b50565b611413816110c3565b811461141e57600080fd5b5056fea2646970667358221220b78583c9e3e5f752054f6ddb4167940a7143ddeb39270d7c43c01bd25f36685a64736f6c63430008070033";

export class MockToken__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockToken> {
    return super.deploy(name, symbol, overrides || {}) as Promise<MockToken>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  attach(address: string): MockToken {
    return super.attach(address) as MockToken;
  }
  connect(signer: Signer): MockToken__factory {
    return super.connect(signer) as MockToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new utils.Interface(_abi) as MockTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockToken {
    return new Contract(address, _abi, signerOrProvider) as MockToken;
  }
}
