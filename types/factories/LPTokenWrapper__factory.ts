/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LPTokenWrapper,
  LPTokenWrapperInterface,
} from "../LPTokenWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xf8728eae",
        type: "bytes32",
      },
    ],
    name: "c_0xf8728eae",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "lpt",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalInput",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611113806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a694fc3a11610050578063a694fc3a146100e1578063bf734879146100fd578063ce5fc8d01461011957610072565b80632e1a7d4d1461007757806370a08231146100935780639e15bc25146100c3575b600080fd5b610091600480360381019061008c9190610ba2565b610137565b005b6100ad60048036038101906100a89190610b1b565b610369565b6040516100ba9190610de3565b60405180910390f35b6100cb610436565b6040516100d89190610de3565b60405180910390f35b6100fb60048036038101906100f69190610ba2565b6104c4565b005b61011760048036038101906101129190610b75565b6106f8565b005b6101216106fb565b60405161012e9190610d46565b60405180910390f35b6101637f03b4afef8511966bfba9822127d02293f77c597768524757ea04c9878c7fac6d60001b6106f8565b61018f7f94b0cc750a45ffd9fce130694029749d95db28d34623941d84126e2556414af560001b6106f8565b6101bb7f4f6a14670072f3a1e5606a574f9a159eaee38f08ede2b12906880331daaf347a60001b6106f8565b6101d08160015461071f90919063ffffffff16565b6001819055506102027f018cffb62789330b8c7e38401940c5acbf86fd95d9588798d61c876a190301ca60001b6106f8565b61022e7f3474485abb406e7a3215b0c9b78987f11a2a828dc00b9f99af8950c064e9956360001b6106f8565b61028081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461071f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102ef7fbe657eaa959ed644a4f9724f7fefe4896b895046e552b975d9a65015bbbfb45060001b6106f8565b61031b7f9516440bd9dd4909ca617de4930b35255e7b329f2b0f0e83198c1ced4ace980660001b6106f8565b610366338260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166107359092919063ffffffff16565b50565b60006103977f7d852b38eef357183eea9fad79e7a7c5a627000c40393a8b36fea89e119aab8d60001b6106f8565b6103c37fb54c40402b754a89a45e8696eeaa4f3dfce2e06cf80ebd45f6d4341ab2d1f91e60001b6106f8565b6103ef7f5caffb9af6270deb9e3f956ac72414191fe4b94083bea5d573b4186eeb845cd160001b6106f8565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006104647f4f85b1a894929a7b34bc77cc2225a4221ee9d90f48a7fd66d63e94a7be65385760001b6106f8565b6104907f8347e530890f67deae927f634e081d0f324381a0254fe14d72bc25c6088e405360001b6106f8565b6104bc7f5d05ea2daa25c2e0dd8e510a774aac9a16591aad8bac9110e0fb880fc8f2f71660001b6106f8565b600154905090565b6104f07f3cdcfaeac73eb1cfcb1e1d7dd46a3ddd3b150766d64a9a4096144ef112c690a160001b6106f8565b61051c7f07de1b82d880676f2f24b61092432f3c1105a70a869387d0383053fb69d55e2e60001b6106f8565b6105487f4e4b91c7276bddfda2e158358d52973a9e3675dcc171362584ade716f877bc2d60001b6106f8565b61055d816001546107bb90919063ffffffff16565b60018190555061058f7fa31b20f5b77dca196edd432015466e4c1631327c31837016094896e74a06075e60001b6106f8565b6105bb7fc71b23bdb4027b476de1476430e2c1369c3ea847b737db4694bdee1227f65e1960001b6106f8565b61060d81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107bb90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061067c7f481c02eac751cffdb764319ee6d5cd67adb39bac000444aafdc1a1559f52a44a60001b6106f8565b6106a87f071d4427031f6b2ebff35e2c95cd5502cc0076d19fa1563b79bfe62e1bfae47860001b6106f8565b6106f533308360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166107d1909392919063ffffffff16565b50565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818361072d9190610e86565b905092915050565b6107b68363a9059cbb60e01b8484604051602401610754929190610d1d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061085a565b505050565b600081836107c99190610e30565b905092915050565b610854846323b872dd60e01b8585856040516024016107f293929190610ce6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061085a565b50505050565b60006108bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166109219092919063ffffffff16565b905060008151111561091c57808060200190518101906108dc9190610b48565b61091b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091290610dc3565b60405180910390fd5b5b505050565b60606109308484600085610939565b90509392505050565b60608247101561097e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097590610d83565b60405180910390fd5b61098785610a4d565b6109c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bd90610da3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516109ef9190610ccf565b60006040518083038185875af1925050503d8060008114610a2c576040519150601f19603f3d011682016040523d82523d6000602084013e610a31565b606091505b5091509150610a41828286610a60565b92505050949350505050565b600080823b905060008111915050919050565b60608315610a7057829050610ac0565b600083511115610a835782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab79190610d61565b60405180910390fd5b9392505050565b600081359050610ad681611081565b92915050565b600081519050610aeb81611098565b92915050565b600081359050610b00816110af565b92915050565b600081359050610b15816110c6565b92915050565b600060208284031215610b3157610b30610fa4565b5b6000610b3f84828501610ac7565b91505092915050565b600060208284031215610b5e57610b5d610fa4565b5b6000610b6c84828501610adc565b91505092915050565b600060208284031215610b8b57610b8a610fa4565b5b6000610b9984828501610af1565b91505092915050565b600060208284031215610bb857610bb7610fa4565b5b6000610bc684828501610b06565b91505092915050565b610bd881610eba565b82525050565b6000610be982610dfe565b610bf38185610e14565b9350610c03818560208601610f42565b80840191505092915050565b610c1881610f0c565b82525050565b6000610c2982610e09565b610c338185610e1f565b9350610c43818560208601610f42565b610c4c81610fa9565b840191505092915050565b6000610c64602683610e1f565b9150610c6f82610fba565b604082019050919050565b6000610c87601d83610e1f565b9150610c9282611009565b602082019050919050565b6000610caa602a83610e1f565b9150610cb582611032565b604082019050919050565b610cc981610f02565b82525050565b6000610cdb8284610bde565b915081905092915050565b6000606082019050610cfb6000830186610bcf565b610d086020830185610bcf565b610d156040830184610cc0565b949350505050565b6000604082019050610d326000830185610bcf565b610d3f6020830184610cc0565b9392505050565b6000602082019050610d5b6000830184610c0f565b92915050565b60006020820190508181036000830152610d7b8184610c1e565b905092915050565b60006020820190508181036000830152610d9c81610c57565b9050919050565b60006020820190508181036000830152610dbc81610c7a565b9050919050565b60006020820190508181036000830152610ddc81610c9d565b9050919050565b6000602082019050610df86000830184610cc0565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610e3b82610f02565b9150610e4683610f02565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e7b57610e7a610f75565b5b828201905092915050565b6000610e9182610f02565b9150610e9c83610f02565b925082821015610eaf57610eae610f75565b5b828203905092915050565b6000610ec582610ee2565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f1782610f1e565b9050919050565b6000610f2982610f30565b9050919050565b6000610f3b82610ee2565b9050919050565b60005b83811015610f60578082015181840152602081019050610f45565b83811115610f6f576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b61108a81610eba565b811461109557600080fd5b50565b6110a181610ecc565b81146110ac57600080fd5b50565b6110b881610ed8565b81146110c357600080fd5b50565b6110cf81610f02565b81146110da57600080fd5b5056fea26469706673582212206c8b2cfdab231855995bc531bb09aa18b52478afc3fdb296a26fd7b8663d20ef64736f6c63430008070033";

export class LPTokenWrapper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LPTokenWrapper> {
    return super.deploy(overrides || {}) as Promise<LPTokenWrapper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LPTokenWrapper {
    return super.attach(address) as LPTokenWrapper;
  }
  connect(signer: Signer): LPTokenWrapper__factory {
    return super.connect(signer) as LPTokenWrapper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPTokenWrapperInterface {
    return new utils.Interface(_abi) as LPTokenWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LPTokenWrapper {
    return new Contract(address, _abi, signerOrProvider) as LPTokenWrapper;
  }
}
