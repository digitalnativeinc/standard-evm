/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  ILiquidityProtectionService,
  ILiquidityProtectionServiceInterface,
} from "../ILiquidityProtectionService";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "trap",
        type: "string",
      },
    ],
    name: "Blocked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "counterToken",
        type: "address",
      },
    ],
    name: "FirstBlockTrap_preValidateTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "passed",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "counterToken",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "trapBlocks",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "trapCount",
        type: "uint8",
      },
    ],
    name: "LiquidityActivityTrap_preValidateTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "passed",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "counterToken",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "trapBlocks",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "trapAmount",
        type: "uint128",
      },
    ],
    name: "LiquidityAmountTrap_preValidateTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "passed",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "counterToken",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "trapBlocks",
        type: "uint8",
      },
      {
        internalType: "uint64",
        name: "trapPercent",
        type: "uint64",
      },
    ],
    name: "LiquidityPercentTrap_preValidateTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "passed",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getLiquidityPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "counterToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "isBlocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ILiquidityProtectionService__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidityProtectionServiceInterface {
    return new utils.Interface(_abi) as ILiquidityProtectionServiceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILiquidityProtectionService {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ILiquidityProtectionService;
  }
}
