/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "borrow()": FunctionFragment;
    "cAggregator()": FunctionFragment;
    "closeVault(uint256)": FunctionFragment;
    "collateral()": FunctionFragment;
    "createdAt()": FunctionFragment;
    "dAggregator()": FunctionFragment;
    "debt()": FunctionFragment;
    "depositCollateral(uint256)": FunctionFragment;
    "depositCollateralNative()": FunctionFragment;
    "feePool()": FunctionFragment;
    "getDebt()": FunctionFragment;
    "initialize(address,uint256,address,address,address,address,uint256,address,address)": FunctionFragment;
    "liquidate()": FunctionFragment;
    "manager()": FunctionFragment;
    "payDebt(uint256)": FunctionFragment;
    "v1()": FunctionFragment;
    "v2Factory()": FunctionFragment;
    "vaultId()": FunctionFragment;
    "withdrawCollateral(uint256)": FunctionFragment;
    "withdrawCollateralNative(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "borrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateralNative",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "v1", values?: undefined): string;
  encodeFunctionData(functionFragment: "v2Factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaultId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateralNative",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateralNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "v1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "v2Factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateralNative",
    data: BytesLike
  ): Result;

  events: {
    "Borrow(uint256,uint256)": EventFragment;
    "CloseVault(address,uint256,uint256)": EventFragment;
    "DepositCollateral(uint256,uint256)": EventFragment;
    "Liquidated(address,address,uint256)": EventFragment;
    "PayBack(uint256,uint256,uint256)": EventFragment;
    "WithdrawCollateral(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCollateral"): EventFragment;
}

export type BorrowEvent = TypedEvent<
  [BigNumber, BigNumber] & { vaultID: BigNumber; amount: BigNumber }
>;

export type CloseVaultEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    vault: string;
    amount: BigNumber;
    closingFee: BigNumber;
  }
>;

export type DepositCollateralEvent = TypedEvent<
  [BigNumber, BigNumber] & { vaultID: BigNumber; amount: BigNumber }
>;

export type LiquidatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    vault: string;
    collateral: string;
    amount: BigNumber;
  }
>;

export type PayBackEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    vaultID: BigNumber;
    amount: BigNumber;
    paybackFee: BigNumber;
  }
>;

export type WithdrawCollateralEvent = TypedEvent<
  [BigNumber, BigNumber] & { vaultID: BigNumber; amount: BigNumber }
>;

export class Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultInterface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    borrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    cAggregator(overrides?: CallOverrides): Promise<[string]>;

    closeVault(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    createdAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    dAggregator(overrides?: CallOverrides): Promise<[string]>;

    debt(overrides?: CallOverrides): Promise<[string]>;

    depositCollateral(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateralNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feePool(overrides?: CallOverrides): Promise<[string]>;

    getDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      collateral_: string,
      vaultId_: BigNumberish,
      cAggregator_: string,
      dAggregator_: string,
      v1_: string,
      debt_: string,
      amount_: BigNumberish,
      v2Factory_: string,
      weth_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    payDebt(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    v1(overrides?: CallOverrides): Promise<[string]>;

    v2Factory(overrides?: CallOverrides): Promise<[string]>;

    vaultId(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawCollateral(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateralNative(
      amount_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  borrow(overrides?: CallOverrides): Promise<BigNumber>;

  cAggregator(overrides?: CallOverrides): Promise<string>;

  closeVault(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateral(overrides?: CallOverrides): Promise<string>;

  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  dAggregator(overrides?: CallOverrides): Promise<string>;

  debt(overrides?: CallOverrides): Promise<string>;

  depositCollateral(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateralNative(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feePool(overrides?: CallOverrides): Promise<string>;

  getDebt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    collateral_: string,
    vaultId_: BigNumberish,
    cAggregator_: string,
    dAggregator_: string,
    v1_: string,
    debt_: string,
    amount_: BigNumberish,
    v2Factory_: string,
    weth_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  payDebt(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  v1(overrides?: CallOverrides): Promise<string>;

  v2Factory(overrides?: CallOverrides): Promise<string>;

  vaultId(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawCollateral(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateralNative(
    amount_: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    borrow(overrides?: CallOverrides): Promise<BigNumber>;

    cAggregator(overrides?: CallOverrides): Promise<string>;

    closeVault(amount_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    collateral(overrides?: CallOverrides): Promise<string>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    dAggregator(overrides?: CallOverrides): Promise<string>;

    debt(overrides?: CallOverrides): Promise<string>;

    depositCollateral(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateralNative(overrides?: CallOverrides): Promise<void>;

    feePool(overrides?: CallOverrides): Promise<string>;

    getDebt(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      collateral_: string,
      vaultId_: BigNumberish,
      cAggregator_: string,
      dAggregator_: string,
      v1_: string,
      debt_: string,
      amount_: BigNumberish,
      v2Factory_: string,
      weth_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(overrides?: CallOverrides): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    payDebt(amount_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    v1(overrides?: CallOverrides): Promise<string>;

    v2Factory(overrides?: CallOverrides): Promise<string>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateralNative(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Borrow(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    Borrow(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    "CloseVault(address,uint256,uint256)"(
      vault?: null,
      amount?: null,
      closingFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { vault: string; amount: BigNumber; closingFee: BigNumber }
    >;

    CloseVault(
      vault?: null,
      amount?: null,
      closingFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { vault: string; amount: BigNumber; closingFee: BigNumber }
    >;

    "DepositCollateral(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    DepositCollateral(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    "Liquidated(address,address,uint256)"(
      vault?: null,
      collateral?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; collateral: string; amount: BigNumber }
    >;

    Liquidated(
      vault?: null,
      collateral?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; collateral: string; amount: BigNumber }
    >;

    "PayBack(uint256,uint256,uint256)"(
      vaultID?: null,
      amount?: null,
      paybackFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber; paybackFee: BigNumber }
    >;

    PayBack(
      vaultID?: null,
      amount?: null,
      paybackFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber; paybackFee: BigNumber }
    >;

    "WithdrawCollateral(uint256,uint256)"(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    WithdrawCollateral(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(overrides?: CallOverrides): Promise<BigNumber>;

    cAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    closeVault(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    dAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    depositCollateral(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateralNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<BigNumber>;

    getDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      collateral_: string,
      vaultId_: BigNumberish,
      cAggregator_: string,
      dAggregator_: string,
      v1_: string,
      debt_: string,
      amount_: BigNumberish,
      v2Factory_: string,
      weth_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    payDebt(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    v1(overrides?: CallOverrides): Promise<BigNumber>;

    v2Factory(overrides?: CallOverrides): Promise<BigNumber>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateralNative(
      amount_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeVault(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCollateral(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateralNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      collateral_: string,
      vaultId_: BigNumberish,
      cAggregator_: string,
      dAggregator_: string,
      v1_: string,
      debt_: string,
      amount_: BigNumberish,
      v2Factory_: string,
      weth_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payDebt(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    v1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v2Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCollateral(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateralNative(
      amount_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
