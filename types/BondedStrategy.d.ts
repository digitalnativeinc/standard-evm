/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BondedStrategyInterface extends ethers.utils.Interface {
  functions: {
    "bond(uint256)": FunctionFragment;
    "bonded(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "mtr()": FunctionFragment;
    "stnd()": FunctionFragment;
    "unbond(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bond", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "bonded", values: [string]): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "mtr", values?: undefined): string;
  encodeFunctionData(functionFragment: "stnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bonded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mtr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;

  events: {
    "DividendClaimed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DividendClaimed"): EventFragment;
}

export type DividendClaimedEvent = TypedEvent<
  [string, BigNumber] & { claimer: string; amount: BigNumber }
>;

export class BondedStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BondedStrategyInterface;

  functions: {
    bond(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bonded(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mtr(overrides?: CallOverrides): Promise<[string]>;

    stnd(overrides?: CallOverrides): Promise<[string]>;

    unbond(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bond(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bonded(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mtr(overrides?: CallOverrides): Promise<string>;

  stnd(overrides?: CallOverrides): Promise<string>;

  unbond(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bond(amount_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    bonded(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    mtr(overrides?: CallOverrides): Promise<string>;

    stnd(overrides?: CallOverrides): Promise<string>;

    unbond(amount_: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DividendClaimed(address,uint256)"(
      claimer?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { claimer: string; amount: BigNumber }
    >;

    DividendClaimed(
      claimer?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { claimer: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    bond(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bonded(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mtr(overrides?: CallOverrides): Promise<BigNumber>;

    stnd(overrides?: CallOverrides): Promise<BigNumber>;

    unbond(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bond(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bonded(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mtr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unbond(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
