{
  "version": "3.2",
  "log": [
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)4534_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)4534_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)4534_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4259_storage"
                }
              ]
            },
            "t_struct(Set)4259_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "03d2264274cb41f86358c5a3b45d3cf8512ca5ba107f48a27afcdcd4bb7dd5b6",
          "withoutMetadata": "cc84337fb4719f2db54f2e05c27e583b0d6f1ec101802d9fd92ea5df6872dc53",
          "linkedWithoutMetadata": "cc84337fb4719f2db54f2e05c27e583b0d6f1ec101802d9fd92ea5df6872dc53"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "ca8dcb6fc055edc74be3b658642ce53bd9335dfbaf211d98fbb3ce1ebaa39182",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)5649_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)5649_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)5649_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)5649_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)5649_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)5649_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/oracle/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrice": {
        "src": "contracts/oracle/IPrice.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OracleRegistry": {
        "src": "contracts/oracle/OracleRegistry.sol:6",
        "version": {
          "withMetadata": "b4eafb5709711645ff24fc77d50a8f919f68471ac124a8d3f6ac56a0e45d144b",
          "withoutMetadata": "4a8759faf889252768c68dc8721c713380a1c08ee39e618ba83d13776463676e",
          "linkedWithoutMetadata": "4a8759faf889252768c68dc8721c713380a1c08ee39e618ba83d13776463676e"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "addOracle(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OracleRegistry",
              "label": "PriceFeeds",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/oracle/OracleRegistry.sol:9"
            },
            {
              "contract": "OracleRegistry",
              "label": "feed",
              "type": "t_contract(IPrice)5784",
              "src": "contracts/oracle/OracleRegistry.sol:10"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrice)5784": {
              "label": "contract IPrice"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceConsumerV3": {
        "src": "contracts/oracle/Price.sol:7",
        "version": {
          "withMetadata": "8f2877332076cb113da484d683fa3e6a53f81b771a33430febcf54d3498c2643",
          "withoutMetadata": "d60aa65003329aee1ad8c1636a09def84762c3d0c13d6eb7cd4bb3afca57b080",
          "linkedWithoutMetadata": "d60aa65003329aee1ad8c1636a09def84762c3d0c13d6eb7cd4bb3afca57b080"
        },
        "inherit": [
          "IPrice"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceConsumerV3",
            "src": "contracts/oracle/Price.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceConsumerV3",
              "label": "priceFeed",
              "type": "t_contract(AggregatorV3Interface)5776",
              "src": "contracts/oracle/Price.sol:9"
            },
            {
              "contract": "PriceConsumerV3",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/oracle/Price.sol:11"
            }
          ],
          "types": {
            "t_contract(AggregatorV3Interface)5776": {
              "label": "contract AggregatorV3Interface"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IStablecoin": {
        "src": "contracts/tokens/IStablecoin.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackList": {
        "src": "contracts/tokens/Meter.sol:9",
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BlackList",
              "label": "isBlackListed",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/tokens/Meter.sol:20"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MeterToken": {
        "src": "contracts/tokens/Meter.sol:47",
        "version": {
          "withMetadata": "a10b95db077e6b3afef84ddb68ce41542416a2d69d415e8ea6d28a0d2549f6c6",
          "withoutMetadata": "ec439454b0d58f4a6040b408a221d345fbf16c9797b0769689e308d34aea1a0a",
          "linkedWithoutMetadata": "ec439454b0d58f4a6040b408a221d345fbf16c9797b0769689e308d34aea1a0a"
        },
        "inherit": [
          "IStablecoin",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "BlackList",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MeterToken",
            "src": "contracts/tokens/Meter.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "1d5cf3e1d4e1a73a9a4be05c8cde64d66808f8172382a82b6587919f2c34e4c0",
          "withoutMetadata": "332efc27694176c9542fd6fa8bef8dec73f8a1e996eed027913d4749df95af49",
          "linkedWithoutMetadata": "332efc27694176c9542fd6fa8bef8dec73f8a1e996eed027913d4749df95af49"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:9",
        "version": {
          "withMetadata": "4b15b57559196ebd4dedc43c144149ea4653bae2a38fb870702ca34d53808c5b",
          "withoutMetadata": "e3444eefdc5450d2491d62eba23d687e7f6b4b0eb50c1ec9e66c15d6837f31cb",
          "linkedWithoutMetadata": "e3444eefdc5450d2491d62eba23d687e7f6b4b0eb50c1ec9e66c15d6837f31cb"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:17",
        "version": {
          "withMetadata": "9c0b04d6aee55ac65d0a501aa7ec8b6ad477d30d6cb21238c0c6ec6a57108d04",
          "withoutMetadata": "207eade05dda60de09865ac87afb8f5f2f64cbc1cf608d9b460029c0eaa574a8",
          "linkedWithoutMetadata": "207eade05dda60de09865ac87afb8f5f2f64cbc1cf608d9b460029c0eaa574a8"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:67"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:24"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:25"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "cedfb2aaadcb4c9a011c27b7c7dd99df45096b6518019abd0307cf47a9285b01",
          "withoutMetadata": "c68f1cba0b7dc640b82c0ea7d9ebc8fe45d3e1bfedf712a423a459fa761f210b",
          "linkedWithoutMetadata": "c68f1cba0b7dc640b82c0ea7d9ebc8fe45d3e1bfedf712a423a459fa761f210b"
        },
        "inherit": [
          "IMTRMarket",
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address)",
          "liquidate(address,address,uint256,uint256)",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Router02",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:19"
            },
            {
              "contract": "UniswapV2Router02",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMTRMarket": {
        "src": "contracts/uniswapv2/interfaces/IMTRMarket.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)",
          "liquidate(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "cacae9825a9b7b371fda79f59118a09d5749d713c23343a956b8448999951cce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "467aa7db36a700daad3075d0e3c23e1985b1810658386272edea013010ca8e90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "b673cca1ee93f5e02ba015383415550569099b1657fff50de9340721b3496ff9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "0680ca32011e5fe8d84df7517c3beda9d5360056235257c77ccb98608d01ae90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IV1": {
        "src": "contracts/vaults/meter/IV1.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFromVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/vaults/meter/IVault.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVaultManager": {
        "src": "contracts/vaults/meter/IVaultManager.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCDPConfig(address)",
          "getVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "V1": {
        "src": "contracts/vaults/meter/V1.sol:8",
        "version": {
          "withMetadata": "67b6e7be38f5bb320d492f3724865b710226e3858c6e330124199703c2238618",
          "withoutMetadata": "5a52274bcc2c9bc2af3c1024ff3101c435901bc7e30a245007abe9a424613eba",
          "linkedWithoutMetadata": "5a52274bcc2c9bc2af3c1024ff3101c435901bc7e30a245007abe9a424613eba"
        },
        "inherit": [
          "IV1",
          "AccessControl",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "(address)",
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFromVault(uint256)",
          "exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "V1",
            "src": "contracts/vaults/meter/V1.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "V1",
              "label": "manager",
              "type": "t_address",
              "src": "contracts/vaults/meter/V1.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/vaults/meter/Vault.sol:12",
        "version": {
          "withMetadata": "325c3455360fe7ee12a6dbb5369479decacd9048656f013f006c6358f93d6954",
          "withoutMetadata": "5e3ebdfe515b59e889aa81a1758a1c32f670226d89573c11a732f1f68bd3291d",
          "linkedWithoutMetadata": "5e3ebdfe515b59e889aa81a1758a1c32f670226d89573c11a732f1f68bd3291d"
        },
        "inherit": [
          "IVault"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,uint256,address,address,address,address,address,uint256)",
          "liquidate()",
          "depositCollateralNative(uint256)",
          "depositCollateral(uint256)",
          "withdrawCollateralNative(uint256)",
          "withdrawCollateral(uint256)",
          "payback()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/vaults/meter/Vault.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "feed",
              "type": "t_contract(IPrice)5784",
              "src": "contracts/vaults/meter/Vault.sol:14"
            },
            {
              "contract": "Vault",
              "label": "V1",
              "type": "t_contract(IERC721)3200",
              "src": "contracts/vaults/meter/Vault.sol:16"
            },
            {
              "contract": "Vault",
              "label": "market",
              "type": "t_contract(IMTRMarket)10815",
              "src": "contracts/vaults/meter/Vault.sol:18"
            },
            {
              "contract": "Vault",
              "label": "vltManager",
              "type": "t_contract(IVaultManager)12460",
              "src": "contracts/vaults/meter/Vault.sol:20"
            },
            {
              "contract": "Vault",
              "label": "cAggregator",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:22"
            },
            {
              "contract": "Vault",
              "label": "dAggregator",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:24"
            },
            {
              "contract": "Vault",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:26"
            },
            {
              "contract": "Vault",
              "label": "manager",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:28"
            },
            {
              "contract": "Vault",
              "label": "debt",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:30"
            },
            {
              "contract": "Vault",
              "label": "v1",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:32"
            },
            {
              "contract": "Vault",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:34"
            },
            {
              "contract": "Vault",
              "label": "vaultId",
              "type": "t_uint256",
              "src": "contracts/vaults/meter/Vault.sol:37"
            },
            {
              "contract": "Vault",
              "label": "borrow",
              "type": "t_uint256",
              "src": "contracts/vaults/meter/Vault.sol:40"
            },
            {
              "contract": "Vault",
              "label": "stabilityFee",
              "type": "t_uint256",
              "src": "contracts/vaults/meter/Vault.sol:43"
            }
          ],
          "types": {
            "t_contract(IPrice)5784": {
              "label": "contract IPrice"
            },
            "t_contract(IERC721)3200": {
              "label": "contract IERC721"
            },
            "t_contract(IMTRMarket)10815": {
              "label": "contract IMTRMarket"
            },
            "t_contract(IVaultManager)12460": {
              "label": "contract IVaultManager"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CDPEngine": {
        "src": "contracts/vaults/meter/VaultManager.sol:11",
        "version": {
          "withMetadata": "df58817cfa33eba8620eb7b0a4b84c82aa5d8b89d0bd35de10baae8a6a2ceb3a",
          "withoutMetadata": "6b51fe2af7b8eb651e2e244919a74bfc23a1e35db5f7a845bbc878638d755e94",
          "linkedWithoutMetadata": "6b51fe2af7b8eb651e2e244919a74bfc23a1e35db5f7a845bbc878638d755e94"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "isUndercollateralized(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VaultManager": {
        "src": "contracts/vaults/meter/VaultManager.sol:19",
        "version": {
          "withMetadata": "332560d1501b0be541b73f329c2a869ec97d7fdc1de75399665868f6e9db24d8",
          "withoutMetadata": "d36c28fea017c48c86e210460b27dd2ad3e1ae99046411cfef49c9a54e9322b9",
          "linkedWithoutMetadata": "d36c28fea017c48c86e210460b27dd2ad3e1ae99046411cfef49c9a54e9322b9"
        },
        "inherit": [
          "IVaultManager",
          "OracleRegistry",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address)",
          "initializeCDP(address,uint256,uint256,uint256)",
          "createCDP(address,uint256,uint256)",
          "getCDPConfig(address)",
          "getVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultManager",
            "src": "contracts/vaults/meter/VaultManager.sol:45"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gIndex",
            "src": "contracts/vaults/meter/VaultManager.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultManager",
              "label": "Vaults",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/vaults/meter/VaultManager.sol:24"
            },
            {
              "contract": "VaultManager",
              "label": "LFRConfig",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/vaults/meter/VaultManager.sol:28"
            },
            {
              "contract": "VaultManager",
              "label": "MCRConfig",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/vaults/meter/VaultManager.sol:30"
            },
            {
              "contract": "VaultManager",
              "label": "SFRConfig",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/vaults/meter/VaultManager.sol:32"
            },
            {
              "contract": "VaultManager",
              "label": "v1",
              "type": "t_address",
              "src": "contracts/vaults/meter/VaultManager.sol:35"
            },
            {
              "contract": "VaultManager",
              "label": "manager",
              "type": "t_address",
              "src": "contracts/vaults/meter/VaultManager.sol:37"
            },
            {
              "contract": "VaultManager",
              "label": "meter",
              "type": "t_address",
              "src": "contracts/vaults/meter/VaultManager.sol:39"
            },
            {
              "contract": "VaultManager",
              "label": "gIndex",
              "type": "t_uint256",
              "src": "contracts/vaults/meter/VaultManager.sol:41"
            },
            {
              "contract": "VaultManager",
              "label": "vlt",
              "type": "t_address",
              "src": "contracts/vaults/meter/VaultManager.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "1d5cf3e1d4e1a73a9a4be05c8cde64d66808f8172382a82b6587919f2c34e4c0",
          "withoutMetadata": "332efc27694176c9542fd6fa8bef8dec73f8a1e996eed027913d4749df95af49",
          "linkedWithoutMetadata": "332efc27694176c9542fd6fa8bef8dec73f8a1e996eed027913d4749df95af49"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:9",
        "version": {
          "withMetadata": "4b15b57559196ebd4dedc43c144149ea4653bae2a38fb870702ca34d53808c5b",
          "withoutMetadata": "e3444eefdc5450d2491d62eba23d687e7f6b4b0eb50c1ec9e66c15d6837f31cb",
          "linkedWithoutMetadata": "e3444eefdc5450d2491d62eba23d687e7f6b4b0eb50c1ec9e66c15d6837f31cb"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:17",
        "version": {
          "withMetadata": "9c0b04d6aee55ac65d0a501aa7ec8b6ad477d30d6cb21238c0c6ec6a57108d04",
          "withoutMetadata": "207eade05dda60de09865ac87afb8f5f2f64cbc1cf608d9b460029c0eaa574a8",
          "linkedWithoutMetadata": "207eade05dda60de09865ac87afb8f5f2f64cbc1cf608d9b460029c0eaa574a8"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:67"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:24"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:25"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "cedfb2aaadcb4c9a011c27b7c7dd99df45096b6518019abd0307cf47a9285b01",
          "withoutMetadata": "c68f1cba0b7dc640b82c0ea7d9ebc8fe45d3e1bfedf712a423a459fa761f210b",
          "linkedWithoutMetadata": "c68f1cba0b7dc640b82c0ea7d9ebc8fe45d3e1bfedf712a423a459fa761f210b"
        },
        "inherit": [
          "IMTRMarket",
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address)",
          "liquidate(address,address,uint256,uint256)",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Router02",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:19"
            },
            {
              "contract": "UniswapV2Router02",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMTRMarket": {
        "src": "contracts/uniswapv2/interfaces/IMTRMarket.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)",
          "liquidate(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "ca8dcb6fc055edc74be3b658642ce53bd9335dfbaf211d98fbb3ce1ebaa39182",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "cacae9825a9b7b371fda79f59118a09d5749d713c23343a956b8448999951cce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "467aa7db36a700daad3075d0e3c23e1985b1810658386272edea013010ca8e90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "b673cca1ee93f5e02ba015383415550569099b1657fff50de9340721b3496ff9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "0680ca32011e5fe8d84df7517c3beda9d5360056235257c77ccb98608d01ae90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)4534_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)4534_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)4534_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4259_storage"
                }
              ]
            },
            "t_struct(Set)4259_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "03d2264274cb41f86358c5a3b45d3cf8512ca5ba107f48a27afcdcd4bb7dd5b6",
          "withoutMetadata": "cc84337fb4719f2db54f2e05c27e583b0d6f1ec101802d9fd92ea5df6872dc53",
          "linkedWithoutMetadata": "cc84337fb4719f2db54f2e05c27e583b0d6f1ec101802d9fd92ea5df6872dc53"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)5649_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)5649_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)5649_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)5649_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)5649_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)5649_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/oracle/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrice": {
        "src": "contracts/oracle/IPrice.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OracleRegistry": {
        "src": "contracts/oracle/OracleRegistry.sol:6",
        "version": {
          "withMetadata": "d5271a45899130610f751b820d5a3ffe520385e97f71bb64fb5d7f91fbd7119f",
          "withoutMetadata": "05cf2c181f79617d1c973cac5c6483bb5a6c89242801c6f8f3e568ddcc4a4418",
          "linkedWithoutMetadata": "05cf2c181f79617d1c973cac5c6483bb5a6c89242801c6f8f3e568ddcc4a4418"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "addOracle(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OracleRegistry",
              "label": "PriceFeeds",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/oracle/OracleRegistry.sol:9"
            },
            {
              "contract": "OracleRegistry",
              "label": "feed",
              "type": "t_contract(IPrice)5784",
              "src": "contracts/oracle/OracleRegistry.sol:10"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrice)5784": {
              "label": "contract IPrice"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceConsumerV3": {
        "src": "contracts/oracle/Price.sol:7",
        "version": {
          "withMetadata": "8f2877332076cb113da484d683fa3e6a53f81b771a33430febcf54d3498c2643",
          "withoutMetadata": "d60aa65003329aee1ad8c1636a09def84762c3d0c13d6eb7cd4bb3afca57b080",
          "linkedWithoutMetadata": "d60aa65003329aee1ad8c1636a09def84762c3d0c13d6eb7cd4bb3afca57b080"
        },
        "inherit": [
          "IPrice"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceConsumerV3",
            "src": "contracts/oracle/Price.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceConsumerV3",
              "label": "priceFeed",
              "type": "t_contract(AggregatorV3Interface)5776",
              "src": "contracts/oracle/Price.sol:9"
            },
            {
              "contract": "PriceConsumerV3",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/oracle/Price.sol:11"
            }
          ],
          "types": {
            "t_contract(AggregatorV3Interface)5776": {
              "label": "contract AggregatorV3Interface"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IStablecoin": {
        "src": "contracts/tokens/IStablecoin.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackList": {
        "src": "contracts/tokens/Meter.sol:9",
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BlackList",
              "label": "isBlackListed",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/tokens/Meter.sol:20"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MeterToken": {
        "src": "contracts/tokens/Meter.sol:47",
        "version": {
          "withMetadata": "a10b95db077e6b3afef84ddb68ce41542416a2d69d415e8ea6d28a0d2549f6c6",
          "withoutMetadata": "ec439454b0d58f4a6040b408a221d345fbf16c9797b0769689e308d34aea1a0a",
          "linkedWithoutMetadata": "ec439454b0d58f4a6040b408a221d345fbf16c9797b0769689e308d34aea1a0a"
        },
        "inherit": [
          "IStablecoin",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "BlackList",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MeterToken",
            "src": "contracts/tokens/Meter.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IV1": {
        "src": "contracts/vaults/meter/IV1.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFromVault(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/vaults/meter/IVault.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVaultManager": {
        "src": "contracts/vaults/meter/IVaultManager.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCDPConfig(uint256)",
          "getVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "V1": {
        "src": "contracts/vaults/meter/V1.sol:8",
        "version": {
          "withMetadata": "77725dbe8cb310d5c991c98c183874a854e38105636ad05e4a9d363dd92b37e2",
          "withoutMetadata": "f65f16ae8c285da317b6e4032d2372bdb05b6945c1f8ac27733f678def4f3fec",
          "linkedWithoutMetadata": "f65f16ae8c285da317b6e4032d2372bdb05b6945c1f8ac27733f678def4f3fec"
        },
        "inherit": [
          "IV1",
          "AccessControl",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "(address)",
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFromVault(uint256,uint256)",
          "exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "V1",
            "src": "contracts/vaults/meter/V1.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "V1",
              "label": "manager",
              "type": "t_address",
              "src": "contracts/vaults/meter/V1.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/vaults/meter/Vault.sol:9",
        "version": {
          "withMetadata": "429ffdf554443bba3d11c141f8298ceb88a8284df9260cf15aff8108f2d40e68",
          "withoutMetadata": "566e37ba08fc1761c2b2b8d18a3c713dc6cf39ed5ba95a4b8a56aae6e9e7d8f4",
          "linkedWithoutMetadata": "566e37ba08fc1761c2b2b8d18a3c713dc6cf39ed5ba95a4b8a56aae6e9e7d8f4"
        },
        "inherit": [
          "IVault"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(uint256,uint256,address,address,address,address)",
          "liquidate()",
          "depositCollateral()",
          "withdrawCollateral()",
          "payback()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/vaults/meter/Vault.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "feed",
              "type": "t_contract(IPrice)5784",
              "src": "contracts/vaults/meter/Vault.sol:11"
            },
            {
              "contract": "Vault",
              "label": "V1",
              "type": "t_contract(IERC721)3200",
              "src": "contracts/vaults/meter/Vault.sol:13"
            },
            {
              "contract": "Vault",
              "label": "aggregator",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:15"
            },
            {
              "contract": "Vault",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:17"
            },
            {
              "contract": "Vault",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:19"
            },
            {
              "contract": "Vault",
              "label": "meter",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:21"
            },
            {
              "contract": "Vault",
              "label": "v1",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:23"
            },
            {
              "contract": "Vault",
              "label": "collateralId",
              "type": "t_uint256",
              "src": "contracts/vaults/meter/Vault.sol:26"
            },
            {
              "contract": "Vault",
              "label": "vaultId",
              "type": "t_uint256",
              "src": "contracts/vaults/meter/Vault.sol:29"
            }
          ],
          "types": {
            "t_contract(IPrice)5784": {
              "label": "contract IPrice"
            },
            "t_contract(IERC721)3200": {
              "label": "contract IERC721"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CDPEngine": {
        "src": "contracts/vaults/meter/VaultManager.sol:12",
        "version": {
          "withMetadata": "40466984d9d4fc3f385e9834bb41e01d6d732b7bb229ffe37ebe5475cd9fd73c",
          "withoutMetadata": "dd2ff6c145cdcc5637baead9852ede511fc0d4a4b2ce19a0fdf6eee68ea23b5c",
          "linkedWithoutMetadata": "dd2ff6c145cdcc5637baead9852ede511fc0d4a4b2ce19a0fdf6eee68ea23b5c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "isUndercollateralized(uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VaultManager": {
        "src": "contracts/vaults/meter/VaultManager.sol:20",
        "version": {
          "withMetadata": "9b0bed1ca5c76880a5f7c25ce51bc26c7b6c2deb152a7216e99bc5df973cb9a4",
          "withoutMetadata": "45e67c53710c0be3d81c49624c980c1aa110aacb14260c22231d7f627ca2db98",
          "linkedWithoutMetadata": "45e67c53710c0be3d81c49624c980c1aa110aacb14260c22231d7f627ca2db98"
        },
        "inherit": [
          "IVaultManager",
          "OracleRegistry",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "initializeCDP(uint256,address,uint256,uint256,uint256)",
          "createCDP(uint256,uint256,uint256)",
          "getCDPConfig(uint256)",
          "getVault(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultManager",
            "src": "contracts/vaults/meter/VaultManager.sol:49"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gIndex",
            "src": "contracts/vaults/meter/VaultManager.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultManager",
              "label": "Vaults",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/vaults/meter/VaultManager.sol:26"
            },
            {
              "contract": "VaultManager",
              "label": "Collaterals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/vaults/meter/VaultManager.sol:30"
            },
            {
              "contract": "VaultManager",
              "label": "LFRConfig",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/vaults/meter/VaultManager.sol:32"
            },
            {
              "contract": "VaultManager",
              "label": "MCRConfig",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/vaults/meter/VaultManager.sol:34"
            },
            {
              "contract": "VaultManager",
              "label": "SFRConfig",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/vaults/meter/VaultManager.sol:36"
            },
            {
              "contract": "VaultManager",
              "label": "v1",
              "type": "t_address",
              "src": "contracts/vaults/meter/VaultManager.sol:39"
            },
            {
              "contract": "VaultManager",
              "label": "manager",
              "type": "t_address",
              "src": "contracts/vaults/meter/VaultManager.sol:41"
            },
            {
              "contract": "VaultManager",
              "label": "meter",
              "type": "t_address",
              "src": "contracts/vaults/meter/VaultManager.sol:43"
            },
            {
              "contract": "VaultManager",
              "label": "gIndex",
              "type": "t_uint256",
              "src": "contracts/vaults/meter/VaultManager.sol:45"
            },
            {
              "contract": "VaultManager",
              "label": "vlt",
              "type": "t_address",
              "src": "contracts/vaults/meter/VaultManager.sol:47"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IVault": {
        "src": "contracts/vaults/meter/IVault.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)4534_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)4534_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)4534_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4259_storage"
                }
              ]
            },
            "t_struct(Set)4259_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "03d2264274cb41f86358c5a3b45d3cf8512ca5ba107f48a27afcdcd4bb7dd5b6",
          "withoutMetadata": "cc84337fb4719f2db54f2e05c27e583b0d6f1ec101802d9fd92ea5df6872dc53",
          "linkedWithoutMetadata": "cc84337fb4719f2db54f2e05c27e583b0d6f1ec101802d9fd92ea5df6872dc53"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)5649_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)5649_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)5649_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)5649_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)5649_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)5649_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/oracle/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrice": {
        "src": "contracts/oracle/IPrice.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OracleRegistry": {
        "src": "contracts/oracle/OracleRegistry.sol:6",
        "version": {
          "withMetadata": "d5271a45899130610f751b820d5a3ffe520385e97f71bb64fb5d7f91fbd7119f",
          "withoutMetadata": "05cf2c181f79617d1c973cac5c6483bb5a6c89242801c6f8f3e568ddcc4a4418",
          "linkedWithoutMetadata": "05cf2c181f79617d1c973cac5c6483bb5a6c89242801c6f8f3e568ddcc4a4418"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "addOracle(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OracleRegistry",
              "label": "PriceFeeds",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/oracle/OracleRegistry.sol:9"
            },
            {
              "contract": "OracleRegistry",
              "label": "feed",
              "type": "t_contract(IPrice)5784",
              "src": "contracts/oracle/OracleRegistry.sol:10"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrice)5784": {
              "label": "contract IPrice"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceConsumerV3": {
        "src": "contracts/oracle/Price.sol:7",
        "version": {
          "withMetadata": "8f2877332076cb113da484d683fa3e6a53f81b771a33430febcf54d3498c2643",
          "withoutMetadata": "d60aa65003329aee1ad8c1636a09def84762c3d0c13d6eb7cd4bb3afca57b080",
          "linkedWithoutMetadata": "d60aa65003329aee1ad8c1636a09def84762c3d0c13d6eb7cd4bb3afca57b080"
        },
        "inherit": [
          "IPrice"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceConsumerV3",
            "src": "contracts/oracle/Price.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceConsumerV3",
              "label": "priceFeed",
              "type": "t_contract(AggregatorV3Interface)5776",
              "src": "contracts/oracle/Price.sol:9"
            },
            {
              "contract": "PriceConsumerV3",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/oracle/Price.sol:11"
            }
          ],
          "types": {
            "t_contract(AggregatorV3Interface)5776": {
              "label": "contract AggregatorV3Interface"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BlackList": {
        "src": "contracts/tokens/Meter.sol:8",
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BlackList",
              "label": "isBlackListed",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/tokens/Meter.sol:19"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MeterToken": {
        "src": "contracts/tokens/Meter.sol:46",
        "version": {
          "withMetadata": "8e42c9400373b6d39608a8e5fdf99d7bcf7f538d78d7c5c3eed8bda954dfce01",
          "withoutMetadata": "5f782335c38ba72874b7f2323de3e615762388917baa4bbb7fa3337a32d353c6",
          "linkedWithoutMetadata": "5f782335c38ba72874b7f2323de3e615762388917baa4bbb7fa3337a32d353c6"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "BlackList",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "pause()",
          "unpause()",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MeterToken",
            "src": "contracts/tokens/Meter.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVaultFactory": {
        "src": "contracts/vaults/meter/IVaultFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCDPConfig(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "V1": {
        "src": "contracts/vaults/meter/V1.sol:7",
        "version": {
          "withMetadata": "fd672f305a5f9978a427f89155da8ffbbbe6e174d5f7539139ecf948c7932894",
          "withoutMetadata": "5fb888335fcde68cfe5410f34e745e802a5e16306a3a58c832b54a167797fe4e",
          "linkedWithoutMetadata": "5fb888335fcde68cfe5410f34e745e802a5e16306a3a58c832b54a167797fe4e"
        },
        "inherit": [
          "AccessControl",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "()",
          "mint(address,uint256)",
          "burn(uint256)",
          "exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "V1",
            "src": "contracts/vaults/meter/V1.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/vaults/meter/Vault.sol:7",
        "version": {
          "withMetadata": "1d577da0d934bc6531216a9d58cfeee263b36866fe533fdfc7fb4f04596bfa01",
          "withoutMetadata": "a30b5033d730ef44c3962ad76117df6acf01115eeb1818baeacc11ac1f0fae0b",
          "linkedWithoutMetadata": "a30b5033d730ef44c3962ad76117df6acf01115eeb1818baeacc11ac1f0fae0b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "initialize(uint256,uint256,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Vault",
            "src": "contracts/vaults/meter/Vault.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "feed",
              "type": "t_contract(IPrice)5784",
              "src": "contracts/vaults/meter/Vault.sol:9"
            },
            {
              "contract": "Vault",
              "label": "V1",
              "type": "t_contract(IERC721)3200",
              "src": "contracts/vaults/meter/Vault.sol:11"
            },
            {
              "contract": "Vault",
              "label": "aggregator",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:13"
            },
            {
              "contract": "Vault",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:15"
            },
            {
              "contract": "Vault",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:17"
            },
            {
              "contract": "Vault",
              "label": "v1",
              "type": "t_address",
              "src": "contracts/vaults/meter/Vault.sol:19"
            },
            {
              "contract": "Vault",
              "label": "collateralId",
              "type": "t_uint256",
              "src": "contracts/vaults/meter/Vault.sol:22"
            },
            {
              "contract": "Vault",
              "label": "vaultId",
              "type": "t_uint256",
              "src": "contracts/vaults/meter/Vault.sol:25"
            }
          ],
          "types": {
            "t_contract(IPrice)5784": {
              "label": "contract IPrice"
            },
            "t_contract(IERC721)3200": {
              "label": "contract IERC721"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultFactory": {
        "src": "contracts/vaults/meter/VaultFactory.sol:18",
        "version": {
          "withMetadata": "18585db5d33986098466138a5359b48b7208765402792513e3add31bc9bc2ec6",
          "withoutMetadata": "4544455136892bb3f662b67ebace410330e46c25bfae09edbaf49aeffd695b5e",
          "linkedWithoutMetadata": "4544455136892bb3f662b67ebace410330e46c25bfae09edbaf49aeffd695b5e"
        },
        "inherit": [
          "IVaultFactory",
          "OracleRegistry",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "createVault(uint256,uint256,address)",
          "getCDPConfig(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "VaultFactory",
              "label": "LFRConfig",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/vaults/meter/VaultFactory.sol:22"
            },
            {
              "contract": "VaultFactory",
              "label": "MCRConfig",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/vaults/meter/VaultFactory.sol:23"
            },
            {
              "contract": "VaultFactory",
              "label": "v1",
              "type": "t_address",
              "src": "contracts/vaults/meter/VaultFactory.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AggregatorV3Interface": {
        "src": "contracts/oracle/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrice": {
        "src": "contracts/oracle/IPrice.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PriceConsumerV3": {
        "src": "contracts/oracle/Price.sol:7",
        "version": {
          "withMetadata": "a424145b9e4fc6aa86322ff19da9610f71b3d636a0135160872dc424d6917405",
          "withoutMetadata": "d60aa65003329aee1ad8c1636a09def84762c3d0c13d6eb7cd4bb3afca57b080",
          "linkedWithoutMetadata": "d60aa65003329aee1ad8c1636a09def84762c3d0c13d6eb7cd4bb3afca57b080"
        },
        "inherit": [
          "IPrice"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceConsumerV3",
            "src": "contracts/oracle/Price.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceConsumerV3",
              "label": "priceFeed",
              "type": "t_contract(AggregatorV3Interface)45",
              "src": "contracts/oracle/Price.sol:9"
            },
            {
              "contract": "PriceConsumerV3",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/oracle/Price.sol:11"
            }
          ],
          "types": {
            "t_contract(AggregatorV3Interface)45": {
              "label": "contract AggregatorV3Interface"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vault": {
        "src": "contracts/vault/VaultFactory.sol:5",
        "version": {
          "withMetadata": "cdcaee44d15ba3add718be9b8b3ca1bc114a9067d60baa6ac453862722a3ccf7",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vault",
              "label": "PriceFeeds",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/vault/VaultFactory.sol:7"
            },
            {
              "contract": "Vault",
              "label": "feed",
              "type": "t_address",
              "src": "contracts/vault/VaultFactory.sol:8"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AggregatorV3Interface": {
        "src": "contracts/oracle/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PriceConsumerV3": {
        "src": "contracts/oracle/Price.sol:6",
        "version": {
          "withMetadata": "30202a095e53dead518327b8895ca5a2e4305cbe181a7e531e3c54ec832ebc4d",
          "withoutMetadata": "a667dbc78cb6bf57aea9086c53bac821ecc2984c683e2b83d2879451d39bb663",
          "linkedWithoutMetadata": "a667dbc78cb6bf57aea9086c53bac821ecc2984c683e2b83d2879451d39bb663"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceConsumerV3",
            "src": "contracts/oracle/Price.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceConsumerV3",
              "label": "priceFeed",
              "type": "t_contract(AggregatorV3Interface)45",
              "src": "contracts/oracle/Price.sol:8"
            }
          ],
          "types": {
            "t_contract(AggregatorV3Interface)45": {
              "label": "contract AggregatorV3Interface"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AggregatorV3Interface": {
        "src": "contracts/oracle/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PriceConsumerV3": {
        "src": "contracts/oracle/Price.sol:6",
        "version": {
          "withMetadata": "c0292553b9845b5b9bc30a36f48955369c813e7b01d4770fe326ed7699c760d1",
          "withoutMetadata": "0b917f5ef0d408d1646f1749f4f0b28adcaa2b2530dcd31a7d4cde930bdb8574",
          "linkedWithoutMetadata": "0b917f5ef0d408d1646f1749f4f0b28adcaa2b2530dcd31a7d4cde930bdb8574"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceConsumerV3",
            "src": "contracts/oracle/Price.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceConsumerV3",
              "label": "priceFeed",
              "type": "t_contract(AggregatorV3Interface)45",
              "src": "contracts/oracle/Price.sol:8"
            }
          ],
          "types": {
            "t_contract(AggregatorV3Interface)45": {
              "label": "contract AggregatorV3Interface"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AggregatorV3Interface": {
        "src": "contracts/oracle/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PriceConsumerV3": {
        "src": "contracts/oracle/Price.sol:6",
        "version": {
          "withMetadata": "c0292553b9845b5b9bc30a36f48955369c813e7b01d4770fe326ed7699c760d1",
          "withoutMetadata": "0b917f5ef0d408d1646f1749f4f0b28adcaa2b2530dcd31a7d4cde930bdb8574",
          "linkedWithoutMetadata": "0b917f5ef0d408d1646f1749f4f0b28adcaa2b2530dcd31a7d4cde930bdb8574"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getThePrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceConsumerV3",
            "src": "contracts/oracle/Price.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceConsumerV3",
              "label": "priceFeed",
              "type": "t_contract(AggregatorV3Interface)45",
              "src": "contracts/oracle/Price.sol:8"
            }
          ],
          "types": {
            "t_contract(AggregatorV3Interface)45": {
              "label": "contract AggregatorV3Interface"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BlackList": {
        "src": "contracts/tokens/Meter.sol:8",
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BlackList",
              "label": "isBlackListed",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/tokens/Meter.sol:19"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MeterToken": {
        "src": "contracts/tokens/Meter.sol:46",
        "version": {
          "withMetadata": "0e0aee38bd481655bbe50f7ad4d5a50e7422e034c6fa8e6f6381409115fba354",
          "withoutMetadata": "911065b01284f4dc5d0643c8621e50874c827e0e3ae9d2a82bfe8708418042f8",
          "linkedWithoutMetadata": "911065b01284f4dc5d0643c8621e50874c827e0e3ae9d2a82bfe8708418042f8"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "BlackList",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "pause()",
          "unpause()",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MeterToken",
            "src": "contracts/tokens/Meter.sol:52"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IMTRPair": {
        "src": "contracts/uniswapv2/interfaces/IMTRPair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "1d5cf3e1d4e1a73a9a4be05c8cde64d66808f8172382a82b6587919f2c34e4c0",
          "withoutMetadata": "332efc27694176c9542fd6fa8bef8dec73f8a1e996eed027913d4749df95af49",
          "linkedWithoutMetadata": "332efc27694176c9542fd6fa8bef8dec73f8a1e996eed027913d4749df95af49"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:9",
        "version": {
          "withMetadata": "2f2427a0a305dacc8b14f0c9a6497497d154662b3a47bf32441f77044feb5500",
          "withoutMetadata": "e3444eefdc5450d2491d62eba23d687e7f6b4b0eb50c1ec9e66c15d6837f31cb",
          "linkedWithoutMetadata": "e3444eefdc5450d2491d62eba23d687e7f6b4b0eb50c1ec9e66c15d6837f31cb"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:17",
        "version": {
          "withMetadata": "9c0b04d6aee55ac65d0a501aa7ec8b6ad477d30d6cb21238c0c6ec6a57108d04",
          "withoutMetadata": "207eade05dda60de09865ac87afb8f5f2f64cbc1cf608d9b460029c0eaa574a8",
          "linkedWithoutMetadata": "207eade05dda60de09865ac87afb8f5f2f64cbc1cf608d9b460029c0eaa574a8"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:67"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:24"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:25"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "75a46dfddcf0b41b2e17ccd4a11ca629ab0de34e1e28f11de421e3f58862240e",
          "withoutMetadata": "1ab09949f2c701a9656b0385182aa8de9e0c8277c75ef60c7c4044a5372ff36f",
          "linkedWithoutMetadata": "1ab09949f2c701a9656b0385182aa8de9e0c8277c75ef60c7c4044a5372ff36f"
        },
        "inherit": [
          "IMTRMarket",
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address)",
          "liquidate(address,address,uint256,uint256)",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Router02",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:19"
            },
            {
              "contract": "UniswapV2Router02",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMTRMarket": {
        "src": "contracts/uniswapv2/interfaces/IMTRMarket.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "ca8dcb6fc055edc74be3b658642ce53bd9335dfbaf211d98fbb3ce1ebaa39182",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "cacae9825a9b7b371fda79f59118a09d5749d713c23343a956b8448999951cce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "467aa7db36a700daad3075d0e3c23e1985b1810658386272edea013010ca8e90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "b673cca1ee93f5e02ba015383415550569099b1657fff50de9340721b3496ff9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "0680ca32011e5fe8d84df7517c3beda9d5360056235257c77ccb98608d01ae90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/tokens/Meter.sol:11",
        "version": {
          "withMetadata": "88661ffe6e743b14bce9e4fc637b6cd937e2b5489198d18d5eead05e26f9f3e5",
          "withoutMetadata": "fdb68e552abce8fdffb91af922de1a48338a658cb073637786e81f1a52efb32f",
          "linkedWithoutMetadata": "fdb68e552abce8fdffb91af922de1a48338a658cb073637786e81f1a52efb32f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "paused",
            "src": "contracts/tokens/Meter.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/tokens/Meter.sol:15"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BlackList": {
        "src": "contracts/tokens/Meter.sol:51",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getBlackListStatus(address)",
          "getOwner()",
          "addBlackList(address)",
          "removeBlackList(address)",
          "destroyBlackFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BlackList",
              "label": "isBlackListed",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/tokens/Meter.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MeterToken": {
        "src": "contracts/tokens/Meter.sol:89",
        "version": {
          "withMetadata": "1b84dca8562f5075748383c9e325bb1a27266ad6dcb4d198f8a9d5a0d105f23d",
          "withoutMetadata": "39f3caa81ca67d639910c2f48067b3f0828c3982d42c108e5be2368dee0c8b9b",
          "linkedWithoutMetadata": "39f3caa81ca67d639910c2f48067b3f0828c3982d42c108e5be2368dee0c8b9b"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Pausable",
          "BlackList",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MeterToken",
            "src": "contracts/tokens/Meter.sol:93"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "contracts/bridge/polygon/lib/AccessControl.sol:41",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "EnumerableSet",
          "Address"
        ],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleMemberCount(bytes32)",
          "getRoleMember(bytes32,uint256)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)5734_storage)",
              "src": "contracts/bridge/polygon/lib/AccessControl.sol:50"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)5734_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)5734_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)3555_storage"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "withoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26",
          "linkedWithoutMetadata": "1a1f49fb4d8e5394c337b42b3216dbdb2a94c8981a624d6574edb48f2a57df26"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "withoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0",
          "linkedWithoutMetadata": "d0e4e5c2e7978a6d6b8ec20028dac670c532086110dc4992e26993aa78de36c0"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/bridge/polygon/lib/admin/Pausable.sol:4",
        "inherit": [
          "AccessControlMixin",
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "pausers()",
          "paused()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_paused",
            "src": "contracts/bridge/polygon/lib/admin/Pausable.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "contracts/bridge/polygon/lib/admin/Pausable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/bridge/polygon/lib/ERC20.sol:65",
        "version": {
          "withMetadata": "2ee7cc54ca6cd703786dea427fe3e655713512ab1aa8ed9fef2725ccc3877424",
          "withoutMetadata": "8202af7ebd44a117955cbc77b7f066b39557cec0ad09d4bae155b1c79af6e122",
          "linkedWithoutMetadata": "8202af7ebd44a117955cbc77b7f066b39557cec0ad09d4bae155b1c79af6e122"
        },
        "inherit": [
          "IERC20Internal",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/bridge/polygon/lib/ERC20.sol:88"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:69"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:71"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:73"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:75"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:76"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:77"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/bridge/polygon/lib/admin/Rescuable.sol:19",
        "version": {
          "withMetadata": "7092590a1d6d28e51197e4f9eadd6d4e4b29d400d275c97004dee22b4d688265",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "54fa1a40c12798499f8b112657f6e003727642145ca5b8e8c89f646fbbe66b8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Parent": {
        "src": "contracts/bridge/STNDParent.sol:5",
        "version": {
          "withMetadata": "15cef3075e8093be0d199f457fbe17e091534e3d140c01a3971679dd91ef175d",
          "withoutMetadata": "87ed4fb8937e2ea73513a9520068c1291d920cc36ccfc895b77ff8863d44ee2c",
          "linkedWithoutMetadata": "87ed4fb8937e2ea73513a9520068c1291d920cc36ccfc895b77ff8863d44ee2c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "pause(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Parent",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/bridge/STNDParent.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UChildAdministrableERC20": {
        "src": "contracts/bridge/polygon/UChildAdministrableERC20.sol:27",
        "version": {
          "withMetadata": "9447fef6d68a96b40d2998015d7ed62d35108c4869bf7bf2abe08dfb8ece70c2",
          "withoutMetadata": "3640c546a1cbef44cd5cac54cb895211678483009ca6af52b68f1cb45f977088",
          "linkedWithoutMetadata": "3640c546a1cbef44cd5cac54cb895211678483009ca6af52b68f1cb45f977088"
        },
        "inherit": [
          "Rescuable",
          "Pausable",
          "Blacklistable",
          "UChildERC20",
          "MaticGasAbstraction",
          "GasAbstraction",
          "Permit",
          "ContextMixin",
          "NativeMetaTransaction",
          "Nonces",
          "EIP712Domain",
          "Initializable",
          "AccessControlMixin",
          "AccessControl",
          "IChildToken",
          "ERC20",
          "IERC20Internal",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdraw(uint256)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UChildERC20": {
        "src": "contracts/bridge/polygon/UChildERC20.sol:13",
        "version": {
          "withMetadata": "b0cdc9dfd0bb2f7fca33d111d400510809ae4a69d299feb1731cfa100a0c3058",
          "withoutMetadata": "911a325477da35593149713cbd6ef0837267fa1d330f8f810e21b4784c22488a",
          "linkedWithoutMetadata": "911a325477da35593149713cbd6ef0837267fa1d330f8f810e21b4784c22488a"
        },
        "inherit": [
          "MaticGasAbstraction",
          "GasAbstraction",
          "Permit",
          "ContextMixin",
          "NativeMetaTransaction",
          "Nonces",
          "EIP712Domain",
          "Initializable",
          "AccessControlMixin",
          "AccessControl",
          "IChildToken",
          "ERC20",
          "IERC20Internal",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(string,string,uint8,address)",
          "updateMetadata(string,string)",
          "deposit(address,bytes)",
          "withdraw(uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UChildERC20",
            "src": "contracts/bridge/polygon/UChildERC20.sol:26"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IChildToken": {
        "src": "contracts/bridge/polygon/interfaces/IChildToken.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Internal": {
        "src": "contracts/bridge/polygon/interfaces/IERC20Internal.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlMixin": {
        "src": "contracts/bridge/polygon/lib/AccessControlMixin.sol:4",
        "version": {
          "withMetadata": "acd75addfbc071b0f95659e228dba3cb6c35e2b10782ec419d6d2067ad2363fb",
          "withoutMetadata": "28c67acd3903241c9f961c53c7eb8856c61dd66f369408d06f334579e877e918",
          "linkedWithoutMetadata": "28c67acd3903241c9f961c53c7eb8856c61dd66f369408d06f334579e877e918"
        },
        "inherit": [
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlMixin",
              "label": "_revertMsg",
              "type": "t_string_storage",
              "src": "contracts/bridge/polygon/lib/AccessControlMixin.sol:5"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextMixin": {
        "src": "contracts/bridge/polygon/lib/ContextMixin.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECRecover": {
        "src": "contracts/bridge/polygon/lib/ECRecover.sol:30",
        "version": {
          "withMetadata": "93823995aad3cd486f14985b4b44152d551bb87d0cc18149cd39b123d6a9512d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "contracts/bridge/polygon/lib/EIP712Domain.sol:31",
        "version": {
          "withMetadata": "8df23d7833cde74a9ed7bddd1f3694f550a9e6ac46ac464fa716e26d21b3649c",
          "withoutMetadata": "96983ac8ada6064b262dd861611dcd94e9651ff3321d81c887bb73aaa97e943d",
          "linkedWithoutMetadata": "96983ac8ada6064b262dd861611dcd94e9651ff3321d81c887bb73aaa97e943d"
        },
        "inherit": [],
        "libraries": [
          "ECRecover"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Domain": {
        "src": "contracts/bridge/polygon/lib/EIP712Domain.sol:92",
        "inherit": [],
        "libraries": [
          "EIP712"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Domain",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/bridge/polygon/lib/EIP712Domain.sol:93"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "contracts/bridge/polygon/lib/Initializable.sol:3",
        "version": {
          "withMetadata": "c71898d7652f39bf4387c7c21f4f882b0c530063070d07eaec9c05b21e852803",
          "withoutMetadata": "513d733313b00e9d74d3e16f2ef271a141a5268dce4904742a3880546349bdb3",
          "linkedWithoutMetadata": "513d733313b00e9d74d3e16f2ef271a141a5268dce4904742a3880546349bdb3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialized()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_initialized",
            "src": "contracts/bridge/polygon/lib/Initializable.sol:4"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "contracts/bridge/polygon/lib/Initializable.sol:4"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GasAbstraction": {
        "src": "contracts/bridge/polygon/lib/MaticGasAbstraction.sol:34",
        "inherit": [
          "EIP712Domain",
          "IERC20Internal"
        ],
        "libraries": [
          "EIP712"
        ],
        "methods": [
          "authorizationState(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GasAbstraction",
              "label": "_authorizationStates",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_enum(AuthorizationState)6903))",
              "src": "contracts/bridge/polygon/lib/MaticGasAbstraction.sol:56"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_enum(AuthorizationState)6903))": {
              "label": "mapping(address => mapping(bytes32 => enum GasAbstraction.AuthorizationState))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_enum(AuthorizationState)6903)": {
              "label": "mapping(bytes32 => enum GasAbstraction.AuthorizationState)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_enum(AuthorizationState)6903": {
              "label": "enum GasAbstraction.AuthorizationState",
              "members": [
                "Unused",
                "Used",
                "Canceled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MaticGasAbstraction": {
        "src": "contracts/bridge/polygon/lib/MaticGasAbstraction.sol:334",
        "inherit": [
          "GasAbstraction",
          "EIP712Domain",
          "IERC20Internal"
        ],
        "libraries": [
          "EIP712"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NativeMetaTransaction": {
        "src": "contracts/bridge/polygon/lib/NativeMetaTransaction.sol:7",
        "inherit": [
          "Nonces",
          "EIP712Domain"
        ],
        "libraries": [
          "EIP712"
        ],
        "methods": [
          "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Nonces": {
        "src": "contracts/bridge/polygon/lib/Nonces.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Nonces",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/bridge/polygon/lib/Nonces.sol:4"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Permit": {
        "src": "contracts/bridge/polygon/lib/Permit.sol:28",
        "inherit": [
          "Nonces",
          "EIP712Domain",
          "IERC20Internal"
        ],
        "libraries": [
          "EIP712"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Blacklistable": {
        "src": "contracts/bridge/polygon/lib/admin/Blacklistable.sol:4",
        "inherit": [
          "AccessControlMixin",
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "blacklisters()",
          "isBlacklisted(address)",
          "blacklist(address)",
          "unBlacklist(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Blacklistable",
              "label": "_blacklisted",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/bridge/polygon/lib/admin/Blacklistable.sol:7"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Rescuable": {
        "src": "contracts/bridge/polygon/lib/admin/Rescuable.sol:137",
        "inherit": [
          "AccessControlMixin",
          "AccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "rescuers()",
          "rescueERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IMTRPair": {
        "src": "contracts/uniswapv2/interfaces/IMTRPair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "aec803834ced61ee566aeed10c7efd8fee5d3f276fedfd5c3ef309394549cceb",
          "withoutMetadata": "b287b18435701db52205f6ae1c63ed680bc668683933e73d9eddcfbd83529156",
          "linkedWithoutMetadata": "b287b18435701db52205f6ae1c63ed680bc668683933e73d9eddcfbd83529156"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:9",
        "version": {
          "withMetadata": "7c701b60500842817b31019ac354a9a253dca93967dadc55e46e341d30317537",
          "withoutMetadata": "4c5a5eca90e81a89d57c164012094a5b222b0f86fff812e42f866d1775ae829a",
          "linkedWithoutMetadata": "4c5a5eca90e81a89d57c164012094a5b222b0f86fff812e42f866d1775ae829a"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:17",
        "version": {
          "withMetadata": "cc129932c5dfd8fed196874db71990dc0f9f48998854198fec9b276fbb5f067e",
          "withoutMetadata": "f2c4f8535a05833702052ba0303b9d2ce1ad9aec69592bfe46b36cd1552c77cb",
          "linkedWithoutMetadata": "f2c4f8535a05833702052ba0303b9d2ce1ad9aec69592bfe46b36cd1552c77cb"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:67"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:24"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:25"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "0602672d74b660d6db423c8d8a0ce4808e13a382c286f6b9b8d6f28abde6217a",
          "withoutMetadata": "28f11011e487bed37f625a9ba7d77cb2a243b8087ccbc039f9c789a3ecf5072b",
          "linkedWithoutMetadata": "28f11011e487bed37f625a9ba7d77cb2a243b8087ccbc039f9c789a3ecf5072b"
        },
        "inherit": [
          "IMTRMarket",
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address)",
          "liquidate(address,address,uint256,uint256)",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Router02",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:19"
            },
            {
              "contract": "UniswapV2Router02",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMTRMarket": {
        "src": "contracts/uniswapv2/interfaces/IMTRMarket.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1ad446aaba891708f2b862312728c4643b111fee7fad34f13dc0336de43f6121",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "1cddace8bf701c7e0cf4bcdc4f07cc804468205be179349c5dcf86c97630427b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "1a6e9e09395cbb9f74936ce93fb268dd71b8b94d3de909f293e7c1a2adcd48e1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "82bff350444509adac5ceb9a8c3c18b592822ff6737665f54e41f16ed36978c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "d41fce746f17b1dca255c20380a4bc7c7a42baba485ea70a2279da71e4802245",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2-bak/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IMTRPair": {
        "src": "contracts/uniswapv2-bak/interfaces/IMTRPair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2-bak/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "2a3020845b2359ba9c95ae19311819b3c92ed3c95edf38734efc76e8300ed1fa",
          "withoutMetadata": "b287b18435701db52205f6ae1c63ed680bc668683933e73d9eddcfbd83529156",
          "linkedWithoutMetadata": "b287b18435701db52205f6ae1c63ed680bc668683933e73d9eddcfbd83529156"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2-bak/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2-bak/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2-bak/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2-bak/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2-bak/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2-bak/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2-bak/UniswapV2Factory.sol:9",
        "version": {
          "withMetadata": "c745eb9cfbcbccb287004f89d8f16ac6375a6115ba74e830f8fb413893a281b9",
          "withoutMetadata": "5f6e812f8f64539b7e83caf1ce05b6718c5a29c3d31acb6071b5e4c04c753b56",
          "linkedWithoutMetadata": "5f6e812f8f64539b7e83caf1ce05b6718c5a29c3d31acb6071b5e4c04c753b56"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2-bak/UniswapV2Factory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2-bak/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2-bak/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2-bak/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2-bak/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2-bak/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:17",
        "version": {
          "withMetadata": "00fb53d6209816219588797ab0662df804d424131f9c3ba75ad27fa435f19a4c",
          "withoutMetadata": "f2c4f8535a05833702052ba0303b9d2ce1ad9aec69592bfe46b36cd1552c77cb",
          "linkedWithoutMetadata": "f2c4f8535a05833702052ba0303b9d2ce1ad9aec69592bfe46b36cd1552c77cb"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:67"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:24"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:25"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2-bak/UniswapV2Pair.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2-bak/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "bbf224f26a4e042b3c79e7e9e6ea68f78c32d8d8546510f83ab4f6ce43ad1539",
          "withoutMetadata": "28f11011e487bed37f625a9ba7d77cb2a243b8087ccbc039f9c789a3ecf5072b",
          "linkedWithoutMetadata": "28f11011e487bed37f625a9ba7d77cb2a243b8087ccbc039f9c789a3ecf5072b"
        },
        "inherit": [
          "IMTRMarket",
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address)",
          "liquidate(address,address,uint256,uint256)",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2-bak/UniswapV2Router02.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2-bak/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2-bak/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Router02",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/uniswapv2-bak/UniswapV2Router02.sol:19"
            },
            {
              "contract": "UniswapV2Router02",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/uniswapv2-bak/UniswapV2Router02.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2-bak/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMTRMarket": {
        "src": "contracts/uniswapv2-bak/interfaces/IMTRMarket.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2-bak/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2-bak/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2-bak/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2-bak/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2-bak/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2-bak/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2-bak/libraries/Math.sol:7",
        "version": {
          "withMetadata": "c710b53d4ff453f4ea0a8950302d35d3437587e103559e4324ce26ed19512988",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2-bak/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "c80a6a16be0a7b22f8bbe3cada7c55a2a4b0fdf1bbe3e7c27e4bd25801a15187",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2-bak/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d235fc46a59c5ff5c59558566577bd253abe373bd5ec3e9f95053e4e3939be8f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2-bak/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "037eb88f0ce75f7a245951c703cb38de6dd6969f71dc1fe15263397774dbe22b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2-bak/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "3fab5cbe7d4820f4a10f7af73eb39fc40dddd927357fce52d340860ac0700c08",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd",
          "withoutMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd",
          "linkedWithoutMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de",
          "withoutMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de",
          "linkedWithoutMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "40407162adb4941bf05c595aaddb898188543da078043b714b652800ab4963f5",
          "withoutMetadata": "7e285e52536889f155fde5c885a801abb7880fda68d4b2825477992056ad980a",
          "linkedWithoutMetadata": "7e285e52536889f155fde5c885a801abb7880fda68d4b2825477992056ad980a"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "7b54fc644d38c6e28126b387f52fb9206f3f9db0fac5e48a92fdc87c4ebddbe0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "b0bf47c1be56c31d70b1bf8dee244287a5b0a678dc240dce00bd2cbe60cdbeff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "9fa3dbc1720945a0a2ad1d7a795f1d2b7811228a60d8f8fcdbfbffe477110e74",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "816445dc89d5fc43ef05515401c19b806675110e9cc82a48e17434afa99e01f2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "ca8621646a997783b2db80010aeed38ddcbc7d0ea28542fc84557038be639db3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "146d9e1d40cf390eab6293e230b27eb44e514e1cacea1d4459d932fe73049033",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "893e016acfb474f92b153068424c3b534d96cc561c52737dc8717fb3e60d40b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "b805a435a9619284635164f289ce8e03d50a865df0aeb5e27419698b59e939fc",
          "withoutMetadata": "4bdd65fc55fedeffa1b293ee20df795bf7b2c892d2783495199d25d4856c3f9d",
          "linkedWithoutMetadata": "4bdd65fc55fedeffa1b293ee20df795bf7b2c892d2783495199d25d4856c3f9d"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "ab71d4fe3dc3ad20428a21bad1330b29d7c943e401aa285252fca20ad11aa011",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Parent": {
        "src": "contracts/bridge/STNDParent.sol:5",
        "version": {
          "withMetadata": "2525ca55bcca4d05e50f7d1f797bc1000edea9df80a4a8578493ae335b050ebf",
          "withoutMetadata": "bb2db3ab9a03c17fcaa4d167af449d3847ae32ebd87b9177dbf59ae2e9f91b5f",
          "linkedWithoutMetadata": "bb2db3ab9a03c17fcaa4d167af449d3847ae32ebd87b9177dbf59ae2e9f91b5f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "pause(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Parent",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/bridge/STNDParent.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "1d287f94086189ef9d3d058a094feb3b189d9a6e8078ca0c12325b436fb1884d",
          "withoutMetadata": "3619946d439623772c8e16b5fc1e37e61aca013605fafa1785726021c426c555",
          "linkedWithoutMetadata": "3619946d439623772c8e16b5fc1e37e61aca013605fafa1785726021c426c555"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "1a619fc9653093e47d13ea43159622f9596f0c2abce37fbb95ce5b6ad401feca",
          "withoutMetadata": "952ac20b3763593d62a6678fe6543c5b6e86fa37b1daa47ea3d834e740bca3d2",
          "linkedWithoutMetadata": "952ac20b3763593d62a6678fe6543c5b6e86fa37b1daa47ea3d834e740bca3d2"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd",
          "withoutMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd",
          "linkedWithoutMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de",
          "withoutMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de",
          "linkedWithoutMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "40407162adb4941bf05c595aaddb898188543da078043b714b652800ab4963f5",
          "withoutMetadata": "7e285e52536889f155fde5c885a801abb7880fda68d4b2825477992056ad980a",
          "linkedWithoutMetadata": "7e285e52536889f155fde5c885a801abb7880fda68d4b2825477992056ad980a"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "7b54fc644d38c6e28126b387f52fb9206f3f9db0fac5e48a92fdc87c4ebddbe0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "b0bf47c1be56c31d70b1bf8dee244287a5b0a678dc240dce00bd2cbe60cdbeff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "9fa3dbc1720945a0a2ad1d7a795f1d2b7811228a60d8f8fcdbfbffe477110e74",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "816445dc89d5fc43ef05515401c19b806675110e9cc82a48e17434afa99e01f2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "ca8621646a997783b2db80010aeed38ddcbc7d0ea28542fc84557038be639db3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "146d9e1d40cf390eab6293e230b27eb44e514e1cacea1d4459d932fe73049033",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "893e016acfb474f92b153068424c3b534d96cc561c52737dc8717fb3e60d40b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "b805a435a9619284635164f289ce8e03d50a865df0aeb5e27419698b59e939fc",
          "withoutMetadata": "4bdd65fc55fedeffa1b293ee20df795bf7b2c892d2783495199d25d4856c3f9d",
          "linkedWithoutMetadata": "4bdd65fc55fedeffa1b293ee20df795bf7b2c892d2783495199d25d4856c3f9d"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "ab71d4fe3dc3ad20428a21bad1330b29d7c943e401aa285252fca20ad11aa011",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Parent": {
        "src": "contracts/bridge/STNDParent.sol:5",
        "version": {
          "withMetadata": "2525ca55bcca4d05e50f7d1f797bc1000edea9df80a4a8578493ae335b050ebf",
          "withoutMetadata": "bb2db3ab9a03c17fcaa4d167af449d3847ae32ebd87b9177dbf59ae2e9f91b5f",
          "linkedWithoutMetadata": "bb2db3ab9a03c17fcaa4d167af449d3847ae32ebd87b9177dbf59ae2e9f91b5f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "pause(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Parent",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/bridge/STNDParent.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "1d287f94086189ef9d3d058a094feb3b189d9a6e8078ca0c12325b436fb1884d",
          "withoutMetadata": "3619946d439623772c8e16b5fc1e37e61aca013605fafa1785726021c426c555",
          "linkedWithoutMetadata": "3619946d439623772c8e16b5fc1e37e61aca013605fafa1785726021c426c555"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "1a619fc9653093e47d13ea43159622f9596f0c2abce37fbb95ce5b6ad401feca",
          "withoutMetadata": "952ac20b3763593d62a6678fe6543c5b6e86fa37b1daa47ea3d834e740bca3d2",
          "linkedWithoutMetadata": "952ac20b3763593d62a6678fe6543c5b6e86fa37b1daa47ea3d834e740bca3d2"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd",
          "withoutMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd",
          "linkedWithoutMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de",
          "withoutMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de",
          "linkedWithoutMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "40407162adb4941bf05c595aaddb898188543da078043b714b652800ab4963f5",
          "withoutMetadata": "7e285e52536889f155fde5c885a801abb7880fda68d4b2825477992056ad980a",
          "linkedWithoutMetadata": "7e285e52536889f155fde5c885a801abb7880fda68d4b2825477992056ad980a"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "7b54fc644d38c6e28126b387f52fb9206f3f9db0fac5e48a92fdc87c4ebddbe0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "b0bf47c1be56c31d70b1bf8dee244287a5b0a678dc240dce00bd2cbe60cdbeff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "9fa3dbc1720945a0a2ad1d7a795f1d2b7811228a60d8f8fcdbfbffe477110e74",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "816445dc89d5fc43ef05515401c19b806675110e9cc82a48e17434afa99e01f2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "ca8621646a997783b2db80010aeed38ddcbc7d0ea28542fc84557038be639db3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "146d9e1d40cf390eab6293e230b27eb44e514e1cacea1d4459d932fe73049033",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "893e016acfb474f92b153068424c3b534d96cc561c52737dc8717fb3e60d40b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "b805a435a9619284635164f289ce8e03d50a865df0aeb5e27419698b59e939fc",
          "withoutMetadata": "4bdd65fc55fedeffa1b293ee20df795bf7b2c892d2783495199d25d4856c3f9d",
          "linkedWithoutMetadata": "4bdd65fc55fedeffa1b293ee20df795bf7b2c892d2783495199d25d4856c3f9d"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "ab71d4fe3dc3ad20428a21bad1330b29d7c943e401aa285252fca20ad11aa011",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Parent": {
        "src": "contracts/bridge/STNDParent.sol:5",
        "version": {
          "withMetadata": "2525ca55bcca4d05e50f7d1f797bc1000edea9df80a4a8578493ae335b050ebf",
          "withoutMetadata": "bb2db3ab9a03c17fcaa4d167af449d3847ae32ebd87b9177dbf59ae2e9f91b5f",
          "linkedWithoutMetadata": "bb2db3ab9a03c17fcaa4d167af449d3847ae32ebd87b9177dbf59ae2e9f91b5f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "pause(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Parent",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/bridge/STNDParent.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "1d287f94086189ef9d3d058a094feb3b189d9a6e8078ca0c12325b436fb1884d",
          "withoutMetadata": "3619946d439623772c8e16b5fc1e37e61aca013605fafa1785726021c426c555",
          "linkedWithoutMetadata": "3619946d439623772c8e16b5fc1e37e61aca013605fafa1785726021c426c555"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "1a619fc9653093e47d13ea43159622f9596f0c2abce37fbb95ce5b6ad401feca",
          "withoutMetadata": "952ac20b3763593d62a6678fe6543c5b6e86fa37b1daa47ea3d834e740bca3d2",
          "linkedWithoutMetadata": "952ac20b3763593d62a6678fe6543c5b6e86fa37b1daa47ea3d834e740bca3d2"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "contracts/bridge/polygon/lib/AccessControl.sol:41",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "EnumerableSet",
          "Address"
        ],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleMemberCount(bytes32)",
          "getRoleMember(bytes32,uint256)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)5734_storage)",
              "src": "contracts/bridge/polygon/lib/AccessControl.sol:50"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)5734_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)5734_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)3555_storage"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)3555_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)3555_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3280_storage"
                }
              ]
            },
            "t_struct(Set)3280_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:14",
        "version": {
          "withMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd",
          "withoutMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd",
          "linkedWithoutMetadata": "515cf20574e9ad589b35e17f31995b8b22dec018ae3f909a0401efe8c33f2ccd"
        },
        "inherit": [
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:21"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:17",
        "inherit": [],
        "libraries": [
          "StorageSlot",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de",
          "withoutMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de",
          "linkedWithoutMetadata": "5c72714609d0f492a19e169b91ea30bb395d81c30588cae39e283a7f9638e4de"
        },
        "inherit": [
          "ERC1967Proxy",
          "ERC1967Upgrade",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts/bridge/polygon/lib/admin/Pausable.sol:4",
        "inherit": [
          "AccessControlMixin",
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "pausers()",
          "paused()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_paused",
            "src": "contracts/bridge/polygon/lib/admin/Pausable.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "contracts/bridge/polygon/lib/admin/Pausable.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/bridge/polygon/lib/ERC20.sol:65",
        "version": {
          "withMetadata": "4fac9a7b1a35aecc2c570261cb60931072c1a6ef0e0026b7653d305489ad4f95",
          "withoutMetadata": "b269854a32740bb03694dcf0fcab4d3c3b12cd411f85607e3cc3134610c997c0",
          "linkedWithoutMetadata": "b269854a32740bb03694dcf0fcab4d3c3b12cd411f85607e3cc3134610c997c0"
        },
        "inherit": [
          "IERC20Internal",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/bridge/polygon/lib/ERC20.sol:88"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:69"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:71"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:73"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:75"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:76"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/bridge/polygon/lib/ERC20.sol:77"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/bridge/polygon/lib/admin/Rescuable.sol:17",
        "version": {
          "withMetadata": "5c924e828e71dfedac1e6c0ba663499add480efae908d9b2211f5eed8943f619",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "b0bf47c1be56c31d70b1bf8dee244287a5b0a678dc240dce00bd2cbe60cdbeff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:31",
        "version": {
          "withMetadata": "9fa3dbc1720945a0a2ad1d7a795f1d2b7811228a60d8f8fcdbfbffe477110e74",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "816445dc89d5fc43ef05515401c19b806675110e9cc82a48e17434afa99e01f2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "ca8621646a997783b2db80010aeed38ddcbc7d0ea28542fc84557038be639db3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "146d9e1d40cf390eab6293e230b27eb44e514e1cacea1d4459d932fe73049033",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "893e016acfb474f92b153068424c3b534d96cc561c52737dc8717fb3e60d40b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "b805a435a9619284635164f289ce8e03d50a865df0aeb5e27419698b59e939fc",
          "withoutMetadata": "4bdd65fc55fedeffa1b293ee20df795bf7b2c892d2783495199d25d4856c3f9d",
          "linkedWithoutMetadata": "4bdd65fc55fedeffa1b293ee20df795bf7b2c892d2783495199d25d4856c3f9d"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "ab71d4fe3dc3ad20428a21bad1330b29d7c943e401aa285252fca20ad11aa011",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)4670_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)4670_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)4670_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)4670_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)4670_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Parent": {
        "src": "contracts/bridge/STNDParent.sol:5",
        "version": {
          "withMetadata": "2525ca55bcca4d05e50f7d1f797bc1000edea9df80a4a8578493ae335b050ebf",
          "withoutMetadata": "bb2db3ab9a03c17fcaa4d167af449d3847ae32ebd87b9177dbf59ae2e9f91b5f",
          "linkedWithoutMetadata": "bb2db3ab9a03c17fcaa4d167af449d3847ae32ebd87b9177dbf59ae2e9f91b5f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "pause(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Parent",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/bridge/STNDParent.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UChildAdministrableERC20": {
        "src": "contracts/bridge/polygon/UChildAdministrableERC20.sol:16",
        "version": {
          "withMetadata": "0e39bcd77daafa55b38fb39853709eb595b267132f686715ad417c43b0ee64af",
          "withoutMetadata": "d78f7fe0a46f46615d3ba479656cc7b91dfb2b39d47f2c29cd13e38fd5ceae08",
          "linkedWithoutMetadata": "d78f7fe0a46f46615d3ba479656cc7b91dfb2b39d47f2c29cd13e38fd5ceae08"
        },
        "inherit": [
          "Rescuable",
          "Pausable",
          "Blacklistable",
          "UChildERC20",
          "MaticGasAbstraction",
          "GasAbstraction",
          "Permit",
          "ContextMixin",
          "NativeMetaTransaction",
          "Nonces",
          "EIP712Domain",
          "Initializable",
          "AccessControlMixin",
          "AccessControl",
          "IChildToken",
          "ERC20",
          "IERC20Internal",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdraw(uint256)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UChildERC20": {
        "src": "contracts/bridge/polygon/UChildERC20.sol:13",
        "version": {
          "withMetadata": "90f6d54e2c9e7d8a026378bde82508dbbde480bf277e82a6ed0802b2f3b04634",
          "withoutMetadata": "c72d77172237bf242acf96319861aa856f05758f6ca1217b2f5fb71434e90c65",
          "linkedWithoutMetadata": "c72d77172237bf242acf96319861aa856f05758f6ca1217b2f5fb71434e90c65"
        },
        "inherit": [
          "MaticGasAbstraction",
          "GasAbstraction",
          "Permit",
          "ContextMixin",
          "NativeMetaTransaction",
          "Nonces",
          "EIP712Domain",
          "Initializable",
          "AccessControlMixin",
          "AccessControl",
          "IChildToken",
          "ERC20",
          "IERC20Internal",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(string,string,uint8,address)",
          "updateMetadata(string,string)",
          "deposit(address,bytes)",
          "withdraw(uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)",
          "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UChildERC20",
            "src": "contracts/bridge/polygon/UChildERC20.sol:26"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IChildToken": {
        "src": "contracts/bridge/polygon/interfaces/IChildToken.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Internal": {
        "src": "contracts/bridge/polygon/interfaces/IERC20Internal.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlMixin": {
        "src": "contracts/bridge/polygon/lib/AccessControlMixin.sol:4",
        "version": {
          "withMetadata": "b33de428947d2dd457e50bdc10470e581148b91a5b4fc9022a547cd5c5715a88",
          "withoutMetadata": "6ad2b8d26f5a9af397fd1cfe36cd274533ef49f46cd865942791b393e2197af8",
          "linkedWithoutMetadata": "6ad2b8d26f5a9af397fd1cfe36cd274533ef49f46cd865942791b393e2197af8"
        },
        "inherit": [
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlMixin",
              "label": "_revertMsg",
              "type": "t_string_storage",
              "src": "contracts/bridge/polygon/lib/AccessControlMixin.sol:5"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextMixin": {
        "src": "contracts/bridge/polygon/lib/ContextMixin.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECRecover": {
        "src": "contracts/bridge/polygon/lib/ECRecover.sol:30",
        "version": {
          "withMetadata": "7cad3be3ac5382adedb07193832360ba408a1cfddffb8962c16ff2289c60160f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "contracts/bridge/polygon/lib/EIP712Domain.sol:31",
        "version": {
          "withMetadata": "0435517461c123c04e2357fefec6b1bff5e110f0d5329bbbdbef7c1a989a8d5b",
          "withoutMetadata": "96983ac8ada6064b262dd861611dcd94e9651ff3321d81c887bb73aaa97e943d",
          "linkedWithoutMetadata": "96983ac8ada6064b262dd861611dcd94e9651ff3321d81c887bb73aaa97e943d"
        },
        "inherit": [],
        "libraries": [
          "ECRecover"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Domain": {
        "src": "contracts/bridge/polygon/lib/EIP712Domain.sol:92",
        "inherit": [],
        "libraries": [
          "EIP712"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Domain",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/bridge/polygon/lib/EIP712Domain.sol:93"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "contracts/bridge/polygon/lib/Initializable.sol:3",
        "version": {
          "withMetadata": "27170ed489addd2430ebae965c9ffd837e290e319d6336e0fac96cf523369194",
          "withoutMetadata": "513d733313b00e9d74d3e16f2ef271a141a5268dce4904742a3880546349bdb3",
          "linkedWithoutMetadata": "513d733313b00e9d74d3e16f2ef271a141a5268dce4904742a3880546349bdb3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialized()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_initialized",
            "src": "contracts/bridge/polygon/lib/Initializable.sol:4"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "contracts/bridge/polygon/lib/Initializable.sol:4"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GasAbstraction": {
        "src": "contracts/bridge/polygon/lib/MaticGasAbstraction.sol:34",
        "inherit": [
          "EIP712Domain",
          "IERC20Internal"
        ],
        "libraries": [
          "EIP712"
        ],
        "methods": [
          "authorizationState(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GasAbstraction",
              "label": "_authorizationStates",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_enum(AuthorizationState)6903))",
              "src": "contracts/bridge/polygon/lib/MaticGasAbstraction.sol:56"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_bytes32,t_enum(AuthorizationState)6903))": {
              "label": "mapping(address => mapping(bytes32 => enum GasAbstraction.AuthorizationState))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_enum(AuthorizationState)6903)": {
              "label": "mapping(bytes32 => enum GasAbstraction.AuthorizationState)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_enum(AuthorizationState)6903": {
              "label": "enum GasAbstraction.AuthorizationState",
              "members": [
                "Unused",
                "Used",
                "Canceled"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MaticGasAbstraction": {
        "src": "contracts/bridge/polygon/lib/MaticGasAbstraction.sol:334",
        "inherit": [
          "GasAbstraction",
          "EIP712Domain",
          "IERC20Internal"
        ],
        "libraries": [
          "EIP712"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "NativeMetaTransaction": {
        "src": "contracts/bridge/polygon/lib/NativeMetaTransaction.sol:7",
        "inherit": [
          "Nonces",
          "EIP712Domain"
        ],
        "libraries": [
          "EIP712"
        ],
        "methods": [
          "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Nonces": {
        "src": "contracts/bridge/polygon/lib/Nonces.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Nonces",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/bridge/polygon/lib/Nonces.sol:4"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Permit": {
        "src": "contracts/bridge/polygon/lib/Permit.sol:28",
        "inherit": [
          "Nonces",
          "EIP712Domain",
          "IERC20Internal"
        ],
        "libraries": [
          "EIP712"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Blacklistable": {
        "src": "contracts/bridge/polygon/lib/admin/Blacklistable.sol:4",
        "inherit": [
          "AccessControlMixin",
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "blacklisters()",
          "isBlacklisted(address)",
          "blacklist(address)",
          "unBlacklist(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Blacklistable",
              "label": "_blacklisted",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/bridge/polygon/lib/admin/Blacklistable.sol:7"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Rescuable": {
        "src": "contracts/bridge/polygon/lib/admin/Rescuable.sol:136",
        "inherit": [
          "AccessControlMixin",
          "AccessControl",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "rescuers()",
          "rescueERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "1d287f94086189ef9d3d058a094feb3b189d9a6e8078ca0c12325b436fb1884d",
          "withoutMetadata": "3619946d439623772c8e16b5fc1e37e61aca013605fafa1785726021c426c555",
          "linkedWithoutMetadata": "3619946d439623772c8e16b5fc1e37e61aca013605fafa1785726021c426c555"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "1a619fc9653093e47d13ea43159622f9596f0c2abce37fbb95ce5b6ad401feca",
          "withoutMetadata": "952ac20b3763593d62a6678fe6543c5b6e86fa37b1daa47ea3d834e740bca3d2",
          "linkedWithoutMetadata": "952ac20b3763593d62a6678fe6543c5b6e86fa37b1daa47ea3d834e740bca3d2"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1980",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1980": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}