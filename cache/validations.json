{
  "version": "3.2",
  "log": [
    {
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IMTRPair": {
        "src": "contracts/uniswapv2/interfaces/IMTRPair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "1d5cf3e1d4e1a73a9a4be05c8cde64d66808f8172382a82b6587919f2c34e4c0",
          "withoutMetadata": "332efc27694176c9542fd6fa8bef8dec73f8a1e996eed027913d4749df95af49",
          "linkedWithoutMetadata": "332efc27694176c9542fd6fa8bef8dec73f8a1e996eed027913d4749df95af49"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:9",
        "version": {
          "withMetadata": "2f2427a0a305dacc8b14f0c9a6497497d154662b3a47bf32441f77044feb5500",
          "withoutMetadata": "e3444eefdc5450d2491d62eba23d687e7f6b4b0eb50c1ec9e66c15d6837f31cb",
          "linkedWithoutMetadata": "e3444eefdc5450d2491d62eba23d687e7f6b4b0eb50c1ec9e66c15d6837f31cb"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:17",
        "version": {
          "withMetadata": "9c0b04d6aee55ac65d0a501aa7ec8b6ad477d30d6cb21238c0c6ec6a57108d04",
          "withoutMetadata": "207eade05dda60de09865ac87afb8f5f2f64cbc1cf608d9b460029c0eaa574a8",
          "linkedWithoutMetadata": "207eade05dda60de09865ac87afb8f5f2f64cbc1cf608d9b460029c0eaa574a8"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:67"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:24"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:25"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "75a46dfddcf0b41b2e17ccd4a11ca629ab0de34e1e28f11de421e3f58862240e",
          "withoutMetadata": "1ab09949f2c701a9656b0385182aa8de9e0c8277c75ef60c7c4044a5372ff36f",
          "linkedWithoutMetadata": "1ab09949f2c701a9656b0385182aa8de9e0c8277c75ef60c7c4044a5372ff36f"
        },
        "inherit": [
          "IMTRMarket",
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address)",
          "liquidate(address,address,uint256,uint256)",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Router02",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:19"
            },
            {
              "contract": "UniswapV2Router02",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Router02.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMTRMarket": {
        "src": "contracts/uniswapv2/interfaces/IMTRMarket.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "operator()",
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "ca8dcb6fc055edc74be3b658642ce53bd9335dfbaf211d98fbb3ce1ebaa39182",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "cacae9825a9b7b371fda79f59118a09d5749d713c23343a956b8448999951cce",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "467aa7db36a700daad3075d0e3c23e1985b1810658386272edea013010ca8e90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "b673cca1ee93f5e02ba015383415550569099b1657fff50de9340721b3496ff9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "0680ca32011e5fe8d84df7517c3beda9d5360056235257c77ccb98608d01ae90",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:217",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)311_storage)",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:223"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)311_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)311_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:724",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)906_storage)",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:727"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)906_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)906_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)631_storage"
                }
              ]
            },
            "t_struct(Set)631_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ChildStandardMintableERC20": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1363",
        "version": {
          "withMetadata": "93bdc9c6fc1a71434d5e9d5f6a36bcf5a160033e3a09d08f8b10d735971690f8",
          "withoutMetadata": "93bdc9c6fc1a71434d5e9d5f6a36bcf5a160033e3a09d08f8b10d735971690f8",
          "linkedWithoutMetadata": "93bdc9c6fc1a71434d5e9d5f6a36bcf5a160033e3a09d08f8b10d735971690f8"
        },
        "inherit": [
          "ContextMixin",
          "NativeMetaTransaction",
          "EIP712Base",
          "Initializable",
          "IChildToken",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setParent(address)",
          "changeChildChain(address)",
          "transfer(address,uint256)",
          "withdraw(uint256)",
          "deposit(address,bytes)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ChildStandardMintableERC20",
            "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1376"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ChildStandardMintableERC20",
              "label": "parent",
              "type": "t_address",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1373"
            },
            {
              "contract": "ChildStandardMintableERC20",
              "label": "childChainManagerProxy",
              "type": "t_address",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1374"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextMixin": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1316",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Base": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1135",
        "version": {
          "withMetadata": "a960fc2cf8b71f2c55043167dd99f7d9ee463c0c37bceb0f508aabec575b0887",
          "withoutMetadata": "d155151c8c1ce118d845ca75791af52e17f212c711fe4f8aff697d82bc466f08",
          "linkedWithoutMetadata": "d155151c8c1ce118d845ca75791af52e17f212c711fe4f8aff697d82bc466f08"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "getDomainSeperator()",
          "getChainId()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Base",
              "label": "domainSeperator",
              "type": "t_bytes32",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1150"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:150",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:937",
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:954"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:938"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:940"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:942"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:943"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:435",
        "version": {
          "withMetadata": "da37a47618eb100b15ef80811af2c8e0fde1d89f8b82b39e2f04c5a9bf3531ec",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:171",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:716",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IChildToken": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1112",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:117",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:804",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:887",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IParentToken": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1340",
        "inherit": [],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1120",
        "version": {
          "withMetadata": "1e2017080f7a2c2638bb8aa730d88a2ab51078eb8039bdf73919238a9053ca6a",
          "withoutMetadata": "9f1bc99426ec178afe308ae1f845872c142864224c548abda2ed050eef4e8a13",
          "linkedWithoutMetadata": "9f1bc99426ec178afe308ae1f845872c142864224c548abda2ed050eef4e8a13"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "inited",
            "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1121"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "inited",
              "type": "t_bool",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NativeMetaTransaction": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1212",
        "version": {
          "withMetadata": "17ea347241c0ea9c2bb1d14e30ef9657f4706c467801732aff4e6f990d2f95f2",
          "withoutMetadata": "00e0954165527bf55113a697fab3c84e907a410765d4f4eda056d87233a46245",
          "linkedWithoutMetadata": "00e0954165527bf55113a697fab3c84e907a410765d4f4eda056d87233a46245"
        },
        "inherit": [
          "EIP712Base",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)",
          "getNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "NativeMetaTransaction",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:1223"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "contracts/bridge/StandardMaticEIP712+MetaTransaction.sol:40",
        "version": {
          "withMetadata": "a3731af5a991f4585259d42eff76adcc22f78f63e221ecd5220faf9273c483e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2859_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2859_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2859_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2584_storage"
                }
              ]
            },
            "t_struct(Set)2584_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PolkadotClaim": {
        "src": "contracts/bridge/PolkadotClaim.sol:26",
        "version": {
          "withMetadata": "63be26cbf74ceb8da376be9d4c5d5a3ce4e2e4425a8b2544f3bcd0bd4133db8c",
          "withoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7",
          "linkedWithoutMetadata": "24ec3da5ff074e5821bc888f3e9f0de1daacaae9038fb614f49bcc9eb8733de7"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "()",
          "claim_allo(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PolkadotClaim",
            "src": "contracts/bridge/PolkadotClaim.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PolkadotClaim",
              "label": "stnd",
              "type": "t_contract(IERC20)1344",
              "src": "contracts/bridge/PolkadotClaim.sol:29"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims",
              "type": "t_mapping(t_address,t_struct(Claim)3974_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:39"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claims_idx",
              "type": "t_mapping(t_uint256,t_struct(Claim)3974_storage)",
              "src": "contracts/bridge/PolkadotClaim.sol:42"
            },
            {
              "contract": "PolkadotClaim",
              "label": "admin",
              "type": "t_address",
              "src": "contracts/bridge/PolkadotClaim.sol:45"
            },
            {
              "contract": "PolkadotClaim",
              "label": "index",
              "type": "t_uint256",
              "src": "contracts/bridge/PolkadotClaim.sol:48"
            },
            {
              "contract": "PolkadotClaim",
              "label": "claim",
              "type": "t_struct(Claim)3974_storage",
              "src": "contracts/bridge/PolkadotClaim.sol:51"
            }
          ],
          "types": {
            "t_contract(IERC20)1344": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_struct(Claim)3974_storage)": {
              "label": "mapping(address => struct PolkadotClaim.Claim)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Claim)3974_storage": {
              "label": "struct PolkadotClaim.Claim",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256"
                },
                {
                  "label": "Address",
                  "type": "t_bytes32"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Claim)3974_storage)": {
              "label": "mapping(uint256 => struct PolkadotClaim.Claim)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Parent": {
        "src": "contracts/bridge/STNDParent.sol:5",
        "version": {
          "withMetadata": "15cef3075e8093be0d199f457fbe17e091534e3d140c01a3971679dd91ef175d",
          "withoutMetadata": "87ed4fb8937e2ea73513a9520068c1291d920cc36ccfc895b77ff8863d44ee2c",
          "linkedWithoutMetadata": "87ed4fb8937e2ea73513a9520068c1291d920cc36ccfc895b77ff8863d44ee2c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "pause(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Parent",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/bridge/STNDParent.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1344",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1344": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1344",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1344": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:58",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2859_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2859_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2859_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2584_storage"
                }
              ]
            },
            "t_struct(Set)2584_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "5df9831f65dfe9cad1eb4860e4863cc310835eafe0258b5f64f741248fb2e7f2",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "34c6ce5326fe9eec989593737aa1a175224cf2f8cf6d39efb28e1c8b2b2f54a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4f18b661093e71f58404c008f122a6027e96b61c0709460ab6721b169dc6875a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "6e922948e904d848f1ebf2f4d3dda95a4372de863ac63186282348219d850c85",
          "withoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03",
          "linkedWithoutMetadata": "6219df7478d455d006743159f859f5eaeb91372056d64ccf6b23da2238849b03"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1344",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1344": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1344",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1344": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}